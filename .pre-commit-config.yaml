repos:
-   repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
    -   id: trailing-whitespace
    -   id: end-of-file-fixer
    -   id: check-yaml
    -   id: check-added-large-files
    -   id: check-json
    -   id: check-toml
    -   id: debug-statements
    -   id: mixed-line-ending

-   repo: https://github.com/psf/black
    rev: 23.9.1
    hooks:
    -   id: black
        args: ["--line-length=150"]

-   repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
    -   id: isort
        name: isort (python)
        args: ["--profile", "black", "--line-length=150"]

# 添加Markdown语法检查
-   repo: local
    hooks:
    -   id: markdownlint
        name: markdownlint
        description: "Checks Markdown files for style and syntax"
        entry: pnpm exec markdownlint
        language: node
        types: [markdown]
        args: ["--fix"]
        # 排除自动生成的文件和特定目录
        exclude: '^(website/|node_modules/|vibecopilot.egg-info/)'

# 添加文档链接检查
-   repo: local
    hooks:
    -   id: docs-links-check
        name: Docs links checker
        description: "Checks documentation links validity"
        entry: pnpm exec node scripts/hooks/check_docs_links.js
        language: node
        # 仅在修改Markdown文件时运行
        types: [markdown]
        # 仅检查文档目录
        files: '^website/docs/'
        # 默认只发出警告，不阻止提交
        verbose: true
        stages: [pre-commit]

# 暂时将flake8设为只发出警告不阻止提交
-   repo: https://github.com/pycqa/flake8
    rev: 6.1.0
    hooks:
    -   id: flake8
        args:
            - "--max-line-length=150"
            - "--exclude=.git,__pycache__,docs/,build/,dist/,venv/"
        # 改为警告模式，不阻止提交
        verbose: true
        # 添加 pre-commit 的 exclude
        exclude: ^(examples/|bak/|\.venv/|venv/|build/|dist/)
        stages: [manual]

# 将文件长度检查设为手动模式，方便开发期间提交
-   repo: local
    hooks:
    -   id: check-file-length
        name: Check file length
        entry: >
            python -c "import os,sys;
            files=[f for f in sys.argv[1:] if f.endswith('.py')];
            long_files=[(f,len(open(f).readlines())) for f in files if os.path.exists(f) and len(open(f).readlines())>300 and not 'test' in f];
            print('\n'.join([f'WARNING: File {f} has {l} lines (>300)' for f,l in long_files]) if long_files else '')"
        language: system
        types: [python]
        verbose: true
        stages: [pre-commit]
