---
description: 当用户输入/plan命令时,创建新的计划或任务
globs:
alwaysApply: false
---

# VibeCopilot 计划创建命令处理器

## 命令目的

`/plan`命令用于创建和管理VibeCopilot项目中的计划项目，包括里程碑、故事和任务，形成完整的项目规划体系。

## 关键规则

- 当用户输入`/plan`命令时，创建新的计划项目
- 支持创建多级项目结构：里程碑(milestone)、故事(story)、任务(task)
- 要求指定类型和标题，自动分配ID
- 支持设置关联关系、依赖、状态和优先级
- 更新路线图文件并同步到GitHub
- 使用`{/plan}`格式表示提及计划命令，而非执行

## 命令格式规范

基本语法: `/plan --type=<类型> --title=<标题> [--parent=<父项目ID>] [--status=<状态>] [--priority=<优先级>] [--depends=<依赖项目ID>] [--assignee=<负责人>] [--description=<描述>] [--github]`

参数说明:
- `--type`: 必选，项目类型(milestone/story/task)
- `--title`: 必选，项目标题
- `--parent`: 可选，父项目ID
- `--status`: 可选，初始状态
- `--priority`: 可选，优先级(P0/P1/P2/P3)
- `--depends`: 可选，依赖项目ID(多个用逗号分隔)
- `--assignee`: 可选，负责人
- `--description`: 可选，项目描述
- `--github`: 可选，是否同步到GitHub

## 命令输出格式规范

### 成功响应格式

```
✅ 执行命令: /plan [参数]

[操作结果标题]
[详细结果信息]
[相关统计或影响]
```

### 错误响应格式

```
❌ 命令执行失败: /plan [参数]

错误原因: [具体错误说明]
解决方案: [建议的解决步骤]
```

## 命令执行流程

```mermaid
flowchart TD
    A[开始] --> B[验证必要参数]
    B --> C{参数有效?}
    C -->|否| D[显示错误]
    C -->|是| E[确定项目类型]
    E --> F[生成项目ID]
    F --> G[创建项目数据]
    G --> H[验证依赖关系]
    H --> I{依赖有效?}
    I -->|否| J[显示依赖错误]
    I -->|是| K[更新路线图文件]
    K --> L{GitHub同步?}
    L -->|是| M[同步到GitHub]
    L -->|否| N[显示成功消息]
    M --> N
    D --> O[结束]
    J --> O
    N --> O
```

## 自然语言命令解析

支持自然语言形式的命令输入：

```
用户: "创建一个智能代码生成的里程碑"

系统响应:
✅ 执行命令: /plan --type=milestone --title="智能代码生成"

✅ 里程碑创建成功!

ID: M4
标题: 智能代码生成
状态: 计划中
时间范围: 2024-06-01 至 2024-07-31

路线图文件已更新: .ai/roadmap/current.yaml
GitHub项目已同步: 新的里程碑已添加到项目看板
```

## 项目层级与关联规则

```mermaid
graph TD
    M[里程碑 Milestone] --> S1[故事 Story]
    M --> S2[故事 Story]
    S1 --> T1[任务 Task]
    S1 --> T2[任务 Task]
    S2 --> T3[任务 Task]
    T1 -.依赖.-> T2
    S1 -.依赖.-> S2
```

## 命令错误处理与纠正示例

### 参数缺失错误

```
用户: "/plan --title='智能代码生成模块'"

系统响应:
❌ 命令执行失败: /plan --title="智能代码生成模块"

错误原因: 缺少必要参数 --type (项目类型)
解决方案:
1. 请提供项目类型参数，例如:
   /plan --type=story --title="智能代码生成模块"
2. 可用的项目类型: milestone, story, task
```

### 无效参数值

```
用户: "/plan --type=feature --title='用户认证'"

系统响应:
❌ 命令执行失败: /plan --type=feature --title="用户认证"

错误原因: 无效的项目类型 "feature"
解决方案:
1. 请使用以下有效的项目类型:
   - milestone: 项目里程碑
   - story: 用户故事
   - task: 具体任务
2. 例如: /plan --type=story --title="用户认证"
```

### 依赖错误

```
用户: "/plan --type=task --title='实现登录API' --parent=S1.1 --depends=T9.9"

系统响应:
❌ 命令执行失败: /plan --type=task --title="实现登录API" --parent=S1.1 --depends=T9.9

错误原因: 无效的依赖关系 - 找不到任务 T9.9
解决方案:
1. 检查依赖任务ID是否正确
2. 使用 "/task list" 查看所有可用任务
3. 确保依赖的任务已经创建

当前故事 S1.1 下的可用任务:
- T1.1.1: "设计数据模型"
- T1.1.2: "创建数据库表"
```

### 命令拼写错误

```
用户: "/paln --type=story --title='用户管理'"

系统响应:
⚠️ 命令拼写错误: "/paln" 应为 "/plan"

您是否想执行: /plan --type=story --title="用户管理" ?
请确认或重新输入正确命令。
```

## 命令注释用法

使用`{/plan}`格式表示提及命令而非执行：

```
讨论计划命令时，使用{/plan}表示提及命令而非执行，例如：
"关于{/plan}命令，它用于创建和管理项目计划"
```

## 示例

### 创建里程碑

```
用户: "/plan --type=milestone --title='高级功能开发' --description='实现VibeCopilot的高级功能模块，包括智能代码生成和深度集成能力'"

系统响应:
✅ 执行命令: /plan --type=milestone --title="高级功能开发" --description="实现VibeCopilot的高级功能模块，包括智能代码生成和深度集成能力"

✅ 里程碑创建成功!

ID: M3
标题: 高级功能开发
状态: 计划中
时间范围: 2024-05-01 至 2024-06-30

描述:
实现VibeCopilot的高级功能模块，包括智能代码生成和深度集成能力

路线图文件已更新: .ai/roadmap/current.yaml
GitHub项目已同步: 新的里程碑已添加到项目看板
```

### 创建故事

```
用户: "/plan --type=story --title='智能代码生成模块' --parent=M3 --depends=S2 --priority=P1 --description='实现代码自动生成功能，支持根据注释生成代码和根据需求创建组件' --github"

系统响应:
✅ 执行命令: /plan --type=story --title="智能代码生成模块" --parent=M3 --depends=S2 --priority=P1 --description="实现代码自动生成功能，支持根据注释生成代码和根据需求创建组件" --github

✅ 故事创建成功!

ID: S3.1
标题: 智能代码生成模块
状态: 计划中
所属里程碑: M3 "高级功能开发"
优先级: P1
依赖: S2 "核心引擎开发"(进行中)

描述:
实现代码自动生成功能，支持根据注释生成代码和根据需求创建组件

路线图文件已更新: .ai/roadmap/current.yaml
GitHub Issue已创建: #25
```

### 创建任务

```
用户: "/plan --type=task --title='代码生成核心算法' --parent=S3.1 --priority=P0 --assignee=张三 --description='实现基于大型语言模型的代码生成核心算法'"

系统响应:
✅ 执行命令: /plan --type=task --title="代码生成核心算法" --parent=S3.1 --priority=P0 --assignee=张三 --description="实现基于大型语言模型的代码生成核心算法"

✅ 任务创建成功!

ID: T3.1.1
标题: 代码生成核心算法
状态: 待开始
所属故事: S3.1 "智能代码生成模块"
优先级: P0
负责人: 张三

描述:
实现基于大型语言模型的代码生成核心算法

路线图文件已更新: .ai/roadmap/current.yaml
GitHub Issue已创建: #26
```

## 实现细节

### 数据源
- `.ai/roadmap/current.yaml`: 主要数据源，用于获取现有项目和存储新创建的项目
- GitHub API: 用于创建项目板卡片或Issues

### ID生成规则
- 里程碑: `M{序号}`，如 M1, M2, M3
- 故事: `S{父里程碑序号}.{序号}`，如 S1.1, S2.3
- 任务: `T{父里程碑序号}.{父故事序号}.{序号}`，如 T1.1.2, T2.3.1

### 依赖验证逻辑
- 验证依赖项目是否存在
- 确保依赖项目类型匹配（里程碑依赖里程碑，故事依赖故事等）
- 检测并防止循环依赖
- 验证状态一致性（不能依赖于未开始的项目）

### 默认值设置
- 状态: 里程碑和故事默认为"计划中"，任务默认为"待开始"
- 优先级: 默认为P2
