---
description: 当用户输入/story命令时,显示当前开发阶段和项目进度
globs:
alwaysApply: false
---

# VibeCopilot 故事管理命令处理器

## 命令目的
`/story`命令用于管理VibeCopilot的用户故事，包括创建故事、确认PRD、查看状态和管理列表。

## 规则关系
本命令规则与`story-flow.mdc`紧密配合：
- `story-flow.mdc`定义故事的基本概念、结构标准和PRD产出规范
- `story-cmd.mdc`（本规则）定义故事管理的命令格式和执行流程

## 用户交互规范

- 支持多种表达方式，如“创建新故事：用户认证”和“/story new 用户认证”
- 当命令错误时，提供清晰的纠正提示和标准化格式
- 缺少必要参数时，指导用户提供正确信息
- 使用emoji和格式化输出增强反馈的可读性
- 对于复杂操作，分步引导用户完成

## 命令格式规范
基本语法: `/story [子命令] [参数]`

子命令:
- 无子命令: 显示当前活跃故事信息
- `new <故事名称>`: 创建新故事并启动PRD生成流程
- `confirm <故事ID>`: 将PRD状态更新为Approved
- `list`: 列出所有符合筛选条件的故事

参数说明:
- `--id`: 可选，指定故事ID，设为当前活跃故事
- `--milestone`: 可选，按里程碑筛选故事
- `--status`: 可选，按状态筛选故事
- `--list`: 可选，列出所有符合筛选条件的故事

## 命令执行流程

```mermaid
flowchart TD
    A[开始] --> B{子命令?}
    B -->|无| C{提供了故事ID?}
    B -->|new| N[创建新故事]
    B -->|confirm| O[确认PRD]
    B -->|list| P[列出故事]
    C -->|是| D[查找故事]
    C -->|否| E[显示当前活跃故事]
    N --> Q[生成PRD文档]
    O --> S[检查PRD内容]
    D --> F[设为当前活跃故事]
```

## 子命令处理规范

### 新建故事处理 (`/story new <故事名称>`)
创建新的用户故事并启动PRD生成流程:
1. 生成唯一故事ID
2. 在 `.ai/stories/` 创建故事文件
3. 在 `.ai/prd/` 创建对应PRD文档
4. 设置PRD状态为Draft
5. 启动story-flow流程，引导用户完成PRD编写

### 确认PRD处理 (`/story confirm <故事ID>`)
确认故事PRD完整性并更新状态:
1. 检查PRD文档是否包含所有必要内容
2. 验证内容完整性和质量
3. 更新PRD状态为Approved
4. 准备进入后续开发流程

## 显示内容规范

### 当前故事显示 (`/story`)
显示当前活跃故事的详细信息、所属里程碑、任务列表和进度。

### 故事列表显示 (`/story list` 或 `/story --list`)
按里程碑和状态分组显示故事列表。

### 故事详情显示 (`/story --id=S2`)
显示特定故事的详细信息，包括任务依赖关系图。

## 状态转换图

```mermaid
stateDiagram-v2
    [*] --> planning
    planning --> in_progress
    in_progress --> completed
    in_progress --> blocked
    blocked --> in_progress
    completed --> [*]
```

## 与其他命令的集成
- `/flow story`: 启动story-flow流程
- `/task`: 管理故事内的具体任务
- `/update`: 记录状态变更和进度
- `/check`: 提供项目整体状态概览
- `/plan`: 创建新故事和规划

## 命令注释用法
使用`{/story}`格式表示提及命令而非执行：
```
讨论故事管理时，使用{/story}表示提及命令而非执行，例如：
"关于{/story}命令，它用于管理用户故事"
```

## 反馈和错误处理

### 命令拼写错误

```
用户: `/strory new 用户认证功能`

系统响应:
⚠️ 命令拼写错误: strory

您是否想要执行: /story new 用户认证功能 ?
正确的命令是: /story new <故事名称>
```

### 缺少必要参数

```
用户: `/story confirm`

系统响应:
⚠️ 缺少必要参数: 故事ID

正确的命令格式是: /story confirm <故事ID>
例如: /story confirm S4.1

可用的故事ID:
- S4.1: "用户认证功能" (Draft)
- S3.2: "数据导入功能" (Draft)
```

### 自然语言识别

```
用户: "创建一个新故事：用户注册功能"

系统响应:
ℹ️ 识别到创建故事请求，执行: /story new 用户注册功能

📝 已创建新故事
...成功响应的其余内容...
```

### 引用而非执行处理

```
用户: `@story-flow.mdc 我们需要添加用户认证功能`

系统响应:
❓ 是否需要创建新故事?
请使用: /story new 用户认证功能

注意: @story-flow.mdc 是对流程的引用，不会触发命令执行
```

## 成功响应示例

<example>
  用户: `/story new 用户认证功能`

  系统响应:
  ```
  📝 已创建新故事
  故事ID: S4.1
  标题: 用户认证功能
  状态: Draft
  PRD文档已创建: .ai/prd/prd-user-auth.md
  ```

  用户: `/story confirm S4.1`

  系统响应:
  ```
  ✅ PRD已确认
  故事ID: S4.1
  标题: 用户认证功能
  PRD状态: Approved (已更新)
  ```
</example>

## 实现细节

### 数据源
- `.ai/roadmap/current.yaml`: 主要数据源，包含故事和任务详细信息
- `.ai/prd/`: 存储PRD文档
- GitHub API: 同步故事状态为GitHub项目看板中的卡片
- `.ai/cache/current_story.json`: 存储当前活跃故事
