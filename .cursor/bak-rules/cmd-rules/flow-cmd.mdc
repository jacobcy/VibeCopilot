---
description: 当用户输入/flow命令时，管理和执行VibeCopilot中定义的各种流程
globs:
alwaysApply: false
---

# VibeCopilot 流程执行命令处理器

## 命令目的
`/flow`命令用于管理和执行VibeCopilot中定义的开发流程，提供标准化的流程启动方式和状态管理。

## 规则关系
本命令规则与`flow.mdc`紧密配合：
- `flow.mdc`定义开发流程中的强制检查点和验证标准
- `flow-cmd.mdc`（本规则）定义流程命令的执行方式和交互逻辑

## 关键规则

- 当用户输入`/flow`命令时，启动或管理VibeCopilot中定义的流程
- 流程包括story、spec、coding、test、review、commit等阶段
- 遵循预定义的流程步骤，确保开发过程的标准化
- 流程执行状态可中断、恢复和查看
- 结合其他命令如`/story`、`/task`等实现完整流程支持
- 使用`{/flow}`格式表示提及流程命令，而非执行

## 命令格式规范
基本语法: `/flow [流程名称] [参数]`

流程参数:
- `story`: 启动需求确认和PRD生成流程
- `spec`: 启动开发计划制定流程
- `coding`: 启动代码开发流程
- `test`: 启动测试阶段流程
- `review`: 启动审核阶段流程
- `commit`: 启动代码提交流程

参数说明:
- `--id`: 可选，指定相关对象ID
- `--stage`: 可选，直接进入流程的特定阶段
- `--skip-check`: 可选，跳过前置条件检查（谨慎使用）

## 命令输出格式规范

### 成功响应格式

```
✅ 执行命令: /flow [流程名称] [参数]

[操作结果标题]
[详细结果信息]
[相关统计或影响]
```

### 错误响应格式

```
❌ 命令执行失败: /flow [流程名称] [参数]

错误原因: [具体错误说明]
解决方案: [建议的解决步骤]
```

## 命令执行流程
```mermaid
flowchart TD
    A[开始] --> B{指定了流程名称?}
    B -->|是| C[查找对应流程规则]
    B -->|否| D[显示可用流程列表]
    C --> E{流程规则存在?}
    E -->|是| F[检查前置条件]
    E -->|否| G[提示流程不存在]
    F --> H{满足前置条件?}
    H -->|是| I[启动流程]
    H -->|否| J[提示条件不满足]
```

## 自然语言命令解析

支持自然语言形式的命令输入：

```
用户: "我想开始一个新故事流程"

系统响应:
✅ 执行命令: /flow story

🚀 启动 故事流程

流程ID: F001
名称: 需求确认与PRD产出
对应规则: story-flow.mdc

请提供新故事的标题:
```

## 流程启动处理规范

### 显示可用流程 (`/flow`)
显示系统中所有可用的流程及其简要说明:
```
✅ 执行命令: /flow

🔄 可用流程列表

1. story - 需求确认与PRD产出流程
   命令: /flow story [故事名称]

2. spec - 开发计划制定流程
   命令: /flow spec --id=<故事ID>

3. coding - 代码开发流程
   命令: /flow coding --id=<任务ID>

4. test - 测试阶段流程
   命令: /flow test --id=<任务ID>

5. review - 审核阶段流程
   命令: /flow review --id=<任务ID>

6. commit - 代码提交流程
   命令: /flow commit
```

### 启动特定流程 (`/flow <流程名称>`)
启动指定的流程并执行其定义的步骤:
```
✅ 执行命令: /flow story 用户认证功能

🚀 启动 故事流程

流程ID: F001
名称: 需求确认与PRD产出
对应规则: story-flow.mdc

已创建新故事:
- ID: S4.1
- 标题: 用户认证功能
- 状态: Draft

当前阶段: 1/3 (确认需求范围和优先级)
```

## 命令错误处理与纠正示例

### 未知流程错误

```
用户: "/flow unknown"

系统响应:
❌ 命令执行失败: /flow unknown

错误原因: 未知流程名称 "unknown"
解决方案:
1. 使用以下可用的流程名称:
   - story: 需求确认与PRD产出
   - spec: 开发计划制定
   - coding: 代码开发
   - test: 测试阶段
   - review: 审核阶段
   - commit: 代码提交
2. 使用 "/flow" 查看所有可用流程
```

### 参数错误

```
用户: "/flow spec"

系统响应:
❌ 命令执行失败: /flow spec

错误原因: 缺少必要参数 --id (故事ID)
解决方案:
1. 请提供故事ID参数，例如:
   /flow spec --id=S4.1
2. 或先使用 "/story list" 查看可用的故事ID
```

### 前置条件未满足

```
用户: "/flow review --id=T1.2"

系统响应:
❌ 命令执行失败: /flow review --id=T1.2

错误原因: 不满足前置条件 - 任务 T1.2 尚未完成测试阶段
解决方案:
1. 先完成任务的测试阶段: /flow test --id=T1.2
2. 确保任务状态为 "测试完成"
3. 如确认测试已完成但状态未更新，可使用:
   /update --id=T1.2 --status=test_completed
```

### 命令拼写错误

```
用户: "/flaw story 用户注册"

系统响应:
⚠️ 命令拼写错误: "/flaw story" 应为 "/flow story"

您是否想执行: /flow story 用户注册 ?
请确认或重新输入正确命令。
```

## 流程管理功能

### 流程状态查看
显示当前正在执行的流程状态:
```
✅ 执行命令: /flow status

📊 当前流程状态

流程ID: F001
名称: 需求确认与PRD产出
当前阶段: 2/3 (编写PRD文档)
完成度: 33%
开始时间: 2023-09-15 14:30
运行时间: 2小时15分钟
```

### 流程中断与恢复
支持中断和恢复流程执行:
```
✅ 执行命令: /flow pause F001

⏸️ 流程已暂停

流程ID: F001
名称: 需求确认与PRD产出
当前状态: 已暂停
暂停时间: 2023-09-15 16:45
暂停位置: 阶段2 (编写PRD文档)

使用 `/flow resume F001` 恢复流程
```

## 命令注释用法
使用`{/flow}`格式表示提及命令而非执行：
```
讨论流程命令时，使用{/flow}表示提及命令而非执行，例如：
"关于{/flow}命令，它用于启动和管理开发流程"
```

## 与其他命令的集成
- `/story`: 用于执行故事相关操作
- `/task`: 管理流程中的具体任务
- `/check`: 检查流程前置条件
- `/plan`: 在spec流程中使用
- `/update`: 更新流程执行状态

## 示例

### 显示可用流程

```
用户: "/flow"

系统响应:
✅ 执行命令: /flow

🔄 可用流程列表

1. story - 需求确认与PRD产出流程
   命令: /flow story [故事名称]

2. spec - 开发计划制定流程
   命令: /flow spec --id=<故事ID>

3. coding - 代码开发流程
   命令: /flow coding --id=<任务ID>

使用 `/flow <流程名称>` 启动特定流程。
```

### 启动故事流程

```
用户: "/flow story 用户认证功能"

系统响应:
✅ 执行命令: /flow story 用户认证功能

🚀 启动 故事流程

流程ID: F001
名称: 需求确认与PRD产出
对应规则: story-flow.mdc

已创建新故事:
- ID: S4.1
- 标题: 用户认证功能
- 状态: Draft

当前阶段: 1/3 (确认需求范围和优先级)
```

### 提及流程命令而非执行

```
用户: "关于{/flow}命令，它有哪些常用的子命令？"

系统响应:
{/flow}命令用于启动和管理VibeCopilot的开发流程，主要子命令包括:

1. story - 启动故事流程，用于需求确认和PRD生成
2. spec - 启动规格设计流程，进行技术方案设计
3. coding - 启动代码开发流程，分配和执行编码任务
4. test - 启动测试流程，进行单元测试和集成测试
5. review - 启动代码审核流程，审查代码质量
6. commit - 启动代码提交流程，规范化提交过程
```
