---
description: 当用户输入/rule命令时，激活规则系统，允许增加、修改或删除规则
globs:
alwaysApply: false
---

# VibeCopilot 规则管理命令

## 命令目的

`/rule`命令用于管理VibeCopilot的规则系统，包括激活现有规则、创建新规则、修改规则和删除规则。规则系统是VibeCopilot的核心组成部分，通过规则可以定义项目标准、开发流程和代码质量要求。

## 规则关系

本命令规则与`rule.mdc`紧密配合：
- `rule.mdc`定义规则系统的基本概念、类型分类、模板和执行流程
- `rule-cmd.mdc`（本规则）定义规则管理的命令格式和执行流程
- 两者结合确保规则系统的完整性和可用性

## 关键规则

- 当用户输入`/rule`命令时，激活规则管理功能
- 提供规则查看、创建、修改和删除操作
- 确保规则变更遵循权限控制和变更记录
- 规则文件必须遵循标准MDC格式，包含完整的前置元数据
- 所有规则操作完成后必须提供明确的成功或失败反馈
- 规则变更需要经过验证，确保格式正确和内容合理
- 使用`{/rule}`格式表示提及规则系统，而非执行命令

## 命令格式规范

基本语法: `/rule [操作] [规则名称] [--type=规则类型] [--desc=描述]`

操作类型:
- `list`: 列出所有规则或特定类型的规则
- `view`: 查看特定规则的内容
- `create`: 创建新规则
- `modify`: 修改现有规则
- `delete`: 删除规则
- `activate`: 激活特定规则

参数说明:
- `规则名称`: 规则的名称，如"typescript-best-practices"
- `--type`: 规则类型，如"dev"、"core"、"flow"等
- `--desc`: 规则描述，创建或修改规则时使用

## 命令输出格式规范

### 成功响应格式

```
✅ 执行命令: /rule [操作] [参数]

[操作结果标题]
[详细结果信息]
[相关统计或影响]
```

### 错误响应格式

```
❌ 命令执行失败: /rule [操作] [参数]

错误原因: [具体错误说明]
解决方案: [建议的解决步骤]
```

## 命令执行流程

1. 解析命令参数，确定操作类型和目标规则
2. 根据操作类型执行相应的规则管理操作
3. 对于创建和修改操作，确保规则格式正确
4. 对于删除操作，确认是否有其他规则依赖该规则
5. 完成操作后提供明确的结果反馈
6. 更新规则变更记录

## 自然语言命令解析

支持自然语言形式的命令输入：

```
用户: "显示所有的开发规则"

系统响应:
✅ 执行命令: /rule list --type=dev

📋 开发规则列表 (dev-rules):

1. command.mdc - VibeCopilot命令系统
2. agent.mdc - VibeCopilot专家角色系统
3. flow.mdc - VibeCopilot的强制开发流程检查点
4. rule.mdc - 定义VibeCopilot项目的规则类型和模版

查看详细规则内容请使用: /rule view [规则名称]
```

## 规则变更授权

规则变更需要适当的授权：

- **严格授权原则**：除非用户明确指定或批准，否则不得擅自修改规则
- **紧急修复例外**：仅在修复严重bug且获得明确授权时允许直接修改
- **变更流程**：重要规则变更建议通过`/flow cursor`命令启动正式流程
- **变更记录**：所有规则变更必须记录在日志中，包括变更内容、原因和时间

## 命令错误处理与纠正示例

### 命令拼写错误

```
用户: "/ruel list --type=dev"

系统响应:
⚠️ 命令拼写错误: "/ruel list" 应为 "/rule list"

您是否想执行: /rule list --type=dev ?
请确认或重新输入正确命令。
```

### 参数错误

```
用户: "/rule view"

系统响应:
❌ 命令执行失败: /rule view

错误原因: 缺少必要参数 [规则名称]
解决方案:
1. 请提供要查看的规则名称，例如:
   /rule view command
2. 或先使用 "/rule list" 查看可用规则列表
```

### 无效规则名称

```
用户: "/rule view nonexistent-rule"

系统响应:
❌ 命令执行失败: /rule view nonexistent-rule

错误原因: 找不到名为 "nonexistent-rule" 的规则
解决方案:
1. 检查规则名称是否正确
2. 使用 "/rule list" 查看所有可用规则
3. 尝试查看类似名称的规则: command, rule, flow

可能您想查找的规则:
- command.mdc (命令系统)
- flow.mdc (流程系统)
- rule.mdc (规则系统)
```

## 命令注释用法

使用`{/rule}`格式表示提及命令而非执行：

```
讨论规则系统时，使用{/rule}表示提及命令而非执行，例如：
"关于{/rule}命令，它用于管理VibeCopilot的规则系统"
```

## 示例

### 列出所有开发规则

```
用户: "/rule list --type=dev"

系统响应:
✅ 执行命令: /rule list --type=dev

📋 开发规则列表 (dev-rules):

1. command.mdc - VibeCopilot命令系统
2. agent.mdc - VibeCopilot专家角色系统
3. flow.mdc - VibeCopilot的强制开发流程检查点
4. rule.mdc - 定义VibeCopilot项目的规则类型和模版

查看详细规则内容请使用: /rule view [规则名称]
```

### 查看特定规则

```
用户: "/rule view command"

系统响应:
✅ 执行命令: /rule view command

📖 规则内容: command.mdc

类型: 开发规则 (dev-rules)
描述: VibeCopilot命令系统，提供简洁易用的开发命令，确保开发过程的便捷性和标准化

[显示规则内容摘要]

查看完整内容请使用: /rule view command --full
```

### 创建新规则

```
用户: "/rule create typescript-best-practices --type=tech --desc='TypeScript最佳实践指南'"

系统响应:
✅ 执行命令: /rule create typescript-best-practices --type=tech --desc='TypeScript最佳实践指南'

🆕 已创建新规则!

规则名称: typescript-best-practices.mdc
类型: 技术规则 (tech-rules)
描述: TypeScript最佳实践指南

规则模板已生成，请编辑以下文件完善规则内容:
.cursor/rules/tech-rules/typescript-best-practices.mdc
```

### 提及规则命令而非执行

```
用户: "说到{/rule}命令，它如何帮助维护代码质量？"

系统响应:
{/rule}命令是VibeCopilot的规则管理工具，它通过允许开发者创建、修改和应用规则，帮助维护代码质量。

规则系统定义了代码标准、开发流程和质量要求，通过这些规则，团队可以确保代码的一致性、可维护性和质量。规则也可以自动应用到特定类型的文件，确保所有代码都符合项目标准。
```
