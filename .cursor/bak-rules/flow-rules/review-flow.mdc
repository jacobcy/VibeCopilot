---
description: 本规则定义审核阶段标准和指南。应在以下情况下应用：(1)代码审核时，(2)编写用户文档时，(3)编写开发指南时，(4)准备发布时。规则确保项目质量并沉淀知识，但保持轻量级流程。
globs: ["*.md", "*.ts", "*.tsx", "*.js", "*.jsx", "*.py"]
---

# VibeCopilot 轻量审核流程

role: "质量保障专家" @qa_expert

## 1. 核心定位

- 适用于小团队的轻量级审核流程
- 注重知识沉淀和经验总结
- 强调实用性文档而非形式化审核
- 确保关键信息不丢失，但避免繁琐流程

## 2. 审核阶段工作流

```mermaid
flowchart TD
    A[功能完成] --> B[记录用户指南要点]
    A --> C[记录开发要点]
    B --> D[快速审阅内容]
    C --> D
    D --> E[必要修改]
    E --> F[文档完成]
```

### 2.1 开发到审核阶段衔接
- 代码提交至PR前必须完成自测
- 开发者应准备简要的实现说明，帮助审查者理解
- PR描述必须列出主要变更点和测试方法
- 复杂变更应提供演示方法或测试数据
- 相关文档应与代码同步更新

### 2.2 审核阶段实践
- 审查者使用代码审查检查表确保全面审查
- 采用结对审查方式处理复杂功能
- 使用自动化工具进行代码风格和质量检查
- 审查输出应包含发现的问题和改进建议
- 关键项目的审查记录应归档保存

### 2.3 审核到发布阶段衔接
- 所有严重问题必须在合并前解决
- 非关键问题可记录为技术债务并计划解决
- 测试报告必须显示足够的测试覆盖率
- 用户文档和API文档必须更新并通过审核
- 变更日志必须清晰记录功能变更和影响

## 3. 文档规范

### 3.1 用户指南模板 (@user-guide-template.md)

- **使用时机**: 功能实现完成后，记录用户操作方法
- **关键部分**:
  - **概述**: 简洁描述功能用途(100字以内)
  - **主要功能**: 列出核心功能点和基本操作
  - **常见问题**: 记录可能遇到的主要问题
- **简化标准**:
  - 聚焦核心功能，无需详尽说明每个细节
  - 可使用简单截图或示意图，无需精美设计
  - 只需覆盖主要用例，非全面用户手册

### 3.2 开发指南模板 (@development-guide-template.md)

- **使用时机**: 功能实现完成后，记录技术实现要点
- **关键部分**:
  - **架构简述**: 基本实现方式，可用简单图表
  - **核心代码**: 关键文件和函数说明
  - **注意事项**: 维护时需注意的要点
  - **技术债务**: 已知问题和限制
- **简化标准**:
  - 记录关键决策和实现思路即可
  - 不必详述所有组件和函数
  - 重点标记可能引起问题的区域

## 4. 检查与评估

### 4.1 文档轻量级检查清单

#### 用户指南检查（保持简单）
- [ ] 包含核心功能说明
- [ ] 至少有一个主要操作流程说明
- [ ] 记录常见问题和解决方法

#### 开发指南检查（聚焦重点）
- [ ] 记录核心实现逻辑
- [ ] 说明重要文件和函数
- [ ] 标记已知技术债务

### 4.2 与Flow检查点集成

对flow.mdc强制检查点的调整：
- **强制检查点 11**: ~~必须通过代码审核，解决所有严重问题~~ → 解决明显问题，记录已知限制
- **强制检查点 12**: ~~必须编写用户指南和开发指南~~ → 必须记录核心操作和实现要点
- **强制检查点 13**: ~~API必须有完整文档~~ → 主要API需有基本说明

## 5. 知识管理

- **重视经验总结**: 记录开发过程中的发现和教训
- **示例优于说明**: 用简单代码示例替代冗长说明
- **及时记录**: 发现问题或解决方案时立即记录，而非事后补充
- **共享知识**: 团队内定期分享文档内容，确保知识传递

## 6. 最佳实践

1. **边做边记**: 功能开发过程中随手记录要点
2. **问题驱动**: 从常见问题出发编写文档
3. **定期回顾**: 每月回顾文档，清理过时内容
4. **实用为王**: 确保文档能真正解决问题，而非应付流程
5. **协作编写**: 鼓励团队成员共同完善文档

## 7. 与其他规则的协作

- 与coding.mdc协作，确保开发阶段为审查和测试做好准备
- 与flow规则协作，执行强制性的质量检查点
- 与workflow-flow协作，确保REVIEW和RELEASE阶段的规范执行
- 与spec-flow协作，保证文档质量和一致性
- 与rule-flow协作，沉淀审查经验形成优化规则

## 示例与反面教材

<example type="invalid">
  ## 不专业的文档
  ```
  # 用户API

  登录用户：发送POST请求到/login，带上用户名和密码
  注销用户：调用/logout

  有问题联系开发团队
  ```
</example>

---
此规则为小团队提供轻量级审核和文档指南，注重实用性和知识沉淀，避免过度形式化 📝
