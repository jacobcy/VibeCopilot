---
description: 当用户需要管理简单任务或Story的组成部分时,使用本规则
globs: ["*.ts", "*.tsx", "*.js", "*.jsx", "*.py", "*.md"]
---
# VibeCopilot 任务管理规则

## 核心定位

- 本规则为灵活指导性规则，**非强制性**
- 适用于处理简单、快速的任务或Story的组成任务
- 提供任务管理建议和最佳实践，但允许开发者灵活应用
- 确保与强制性流程规则(flow.mdc)配合工作

## 任务模板关联 (@task-template.md)

- **使用时机**：创建具体开发任务，可独立存在或作为Story的组成部分
- **创建命令**：
  - `/task create <task_title>` (独立任务)
  - `/task create <task_title> --story=<story_id>` (Story关联任务)
- **状态流转**：todo → in-progress → review → done
- **关键字段**：
  - `task_id`: 唯一标识符
  - `story_id`: 关联的Story ID（可选）
  - `estimated_hours`: 估计工时
  - `actual_hours`: 实际工时
  - `completion_criteria`: 完成标准

## 任务类型分类

### 快速任务（Quick Task）
- 小型独立工作，通常<2小时
- 无需Story关联，可直接创建和执行
- 适合bug修复、小型优化、文档更新等
- 命令：`/task quick <title> --type=<bug|enhance|docs>`

### Story任务（Story Task）
- Story的组成部分，为实现Story目标服务
- 必须关联到现有Story
- 命令：`/task create <title> --story=<story_id>`

### 技术债务任务（Tech Debt）
- 专注于代码改进和重构
- 可选关联到Story或独立存在
- 命令：`/task debt <title> --scope=<component>`

## 任务工作流程

```mermaid
flowchart TD
    A[创建任务] --> B[分配任务]
    B --> C[开始任务]
    C --> D[实现]
    D --> E[自测]
    E --> F{需要审查?}
    F -->|是| G[提交审查]
    G --> H[审查通过]
    F -->|否| I[标记完成]
    H --> I
    I --> J[任务总结]
    J --> K[触发commit-flow]
```

## 任务命令示例

```bash
# 创建快速任务
/task quick "修复首页加载错误" --type=bug

# 创建Story关联任务
/task create "实现用户注册表单" --story=story-001

# 创建技术债务任务
/task debt "重构认证模块" --scope=auth

# 开始任务
/task start task-001

# 完成任务
/task done task-001 --hours=1.5
```

## 最佳实践

1. **任务粒度控制**：每个任务应足够小，理想情况下不超过4小时
2. **明确完成标准**：每个任务必须有清晰的完成标准
3. **及时更新状态**：开始或完成任务时应更新状态
4. **记录实际工时**：完成时记录实际耗时，有助于未来估算
5. **关联代码提交**：提交代码时引用任务ID (例如: `fix: 修复登录问题 [task-001]`)
6. **保持任务文档最新**：随着实现过程更新任务细节

## 与强制流程的集成

任务完成时需注意与flow.mdc强制流程的协同：

1. 任务完成后触发commit-flow流程：
   - 确保代码提交遵循Conventional Commits规范（强制检查点5）
   - 确保代码文件不超过200行（强制检查点6）
   - 为关键功能编写单元测试（强制检查点7）

2. 完成Story所有任务后：
   - 确保测试覆盖率达到要求（强制检查点8-10）
   - 完成文档编写（强制检查点12-13）

## 紧急任务处理

对于紧急任务，可使用快速模式但仍需记录：
- 命令：`/task emergency <title> --priority=high`
- 紧急任务也需在完成后补充测试和文档
- 紧急修复应在48小时内完成常规流程补全

## 故障排除

| 常见问题 | 解决方案 |
| ---- | ---- |
| 任务太大难以完成 | 使用`/task split <task_id>`拆分为多个子任务 |
| 任务卡在进行中状态 | 使用`/task update <task_id> --status=<status>`更新状态 |
| 完成后发现问题 | 使用`/task reopen <task_id> --reason=<reason>`重新打开 |

---
此规则提供任务管理建议，作为灵活工具协助开发流程，与强制性流程规则flow.mdc协同工作 🛠️
