---
description: 本规则提供了一系列简洁易用的开发命令，应在以下情况下应用：(1)需要查看可用命令时，(2)检查项目开发进度时，(3)更新开发状态时，(4)管理开发任务时，(5)创建或切换开发分支时，(6)查看或更新项目文档时。规则确保开发过程的便捷性和标准化，特别关注命令解析、响应速度和用户体验。
globs:
alwaysApply: false
---

# VibeCopilot 命令系统

## 基本概念

VibeCopilot命令系统是一套基于自然语言的开发辅助工具，集成了GitHub Projects和本地roadmap.yaml文件用于项目管理。核心设计理念是通过简单直观的命令帮助开发者跟踪、更新和管理项目进度。

命令以`/`开头，支持参数和选项，同时兼容自然语言变体形式。例如，`/check --type=epic`和`请检查所有epic的状态`可能产生相同的结果。

## 符号约定

VibeCopilot中使用的特殊符号具有明确的含义：

- **`/` 符号**：命令执行标识，用于触发命令执行
  - 例如：`/story new 用户认证功能` - 执行创建新故事命令
  - 所有需要执行的操作都应使用`/`开头

- **`{/规则名称}` 格式**：命令注释标识，用于消除命令歧义，不会执行命令
  - 例如：`{/agent}` - 表示提及agent命令，而非执行
  - 例如：`/task(任务命令) task(任务实体) {/task}(命令标识)` - 区分不同概念
  - 适用于需要区分相似命令、实体或概念的场景

- **`@` 符号**：引用标识，用于引用规则、模板或专家角色，不触发执行
  - 例如：`@frontend_expert` - 引用前端专家角色
  - 例如：`@story-template.md` - 引用故事模板
  - 使用`@规则名称`不会触发规则执行，只是一个引用

- **`--` 符号**：命令参数标识，用于传递命令参数
  - 例如：`--id=S1.2` - 指定故事ID参数

- **`#` 符号**：标签标识，用于标记内容类型或分类
  - 例如：`#bug` - 表示这是一个bug

> **重要**：不要使用`@flow-rules/story-flow.mdc`的形式来尝试执行流程，这只是引用而非执行。正确的执行方式是使用`/flow story`或`/story new`命令。当需要提及命令但不执行时，使用`{/flow}`格式进行注释。

## 命令架构

VibeCopilot命令系统包含以下核心命令：

1. **`/check`**: 检查项目状态和进度
2. **`/update`**: 更新对象状态和进度
3. **`/story`**: 管理开发故事和阶段
4. **`/task`**: 管理项目任务
5. **`/plan`**: 创建新计划和任务
6. **`/branch`**: 管理与任务关联的分支
7. **`/flow`**: 启动和管理开发流程
8. **`/memory`**: 管理项目知识库
9. **`/help`**: 显示命令帮助信息
10. **`/agent`**: 激活专家角色系统
11. **`/rule`**: 管理规则系统

## 命令使用规范

### 标准命令格式

所有命令遵循一致的格式规范：

```
/命令名称 [子命令] [参数]
```

- **命令名称**: 主命令，如 story, task, flow 等
- **子命令**: 可选，指定具体操作，如 new, list, start, done 等
- **参数**: 可选，使用 --key=value 格式传递

### 子命令标准

所有命令都支持以下标准子命令格式：

- **无子命令**: 显示当前对象信息（如 `/task` 显示当前任务）
- **new/create**: 创建新对象（如 `/story new 标题`）
- **list**: 列出对象列表（如 `/task list`）
- **start**: 开始执行（如 `/task start T1.2`）
- **done/complete**: 完成对象（如 `/task done T1.2`）

## 命令响应原则

- **快速响应**：命令执行后应立即给予反馈
- **明确结果**：清晰展示操作成功或失败的状态
- **统一格式**：保持一致的输出风格和结构
- **简洁明了**：输出内容避免冗余，聚焦关键信息
- **用户友好**：使用emoji、颜色和格式增强可读性
- **错误指导**：出错时提供明确的解决方案

## 命令输入解析

- 支持多种表达形式，识别用户真实意图
- 不严格要求固定格式，只要意图明确即可
- 有歧义时主动提问澄清，避免错误执行
- 识别出意图后，显示标准格式并执行
- 自动补全省略的必要参数
- 理解上下文，关联相关命令的执行历史

### 命令解析示例

```
用户: "任务3完成了"

系统响应:
✅ 执行命令: /update --id=task-003 --status=completed

任务更新成功!
task-003 "用户头像上传功能" 已标记为已完成
所属故事 story-001 进度: 85% (↑5%)
```

## 命令执行真实性

- 严格禁止返回模拟或假设的命令执行结果
- 只返回实际执行操作后的真实结果
- 当无法实际执行命令时，必须明确说明情况而不是假装已完成
- 在展示命令示例时，必须明确标记为"示例"
- 涉及文件变更、状态更新的操作必须实际执行，不得模拟
- 代替模拟输出，应该详细说明将要执行的实际步骤

## 命令输出格式规范

### 成功响应格式

```
✅ 执行命令: /命令 [参数]

[操作结果标题]
[详细结果信息]
[相关统计或影响]
```

### 错误响应格式

```
❌ 命令执行失败: /命令 [参数]

错误原因: [具体错误说明]
解决方案: [建议的解决步骤]
```

### 提示和警告格式

```
⚠️ 警告: [警告内容]
💡 提示: [提示内容]
```

## 命令自动纠正

- 识别拼写错误并提供正确选项
- 检测语法错误并给出修正建议
- 参数错误时提供有效参数范围
- 缺少必要参数时提示补充
- 避免自作主张，在重大更改前询问确认
- 提供命令历史供用户参考

## 命令组合与流程

- 支持多个命令顺序执行
- 识别命令组合中的依赖关系
- 错误发生时提供回滚选项
- 长流程提供进度指示
- 允许用户随时中断流程
- 维护会话上下文，使连续操作更自然

## 流程执行规则

在VibeCopilot中，命令(Command)和流程(Flow)是两个不同的概念：

- **命令(Command)**：单一操作，执行特定功能，如显示信息、创建对象等
- **流程(Flow)**：一系列步骤的集合，定义完整的工作流程

流程通过两种方式启动：

1. **直接流程命令**: 使用 `/flow <流程名称>` 命令
   - 例如：`/flow story` - 启动完整故事流程
   - 例如：`/flow commit` - 启动代码提交流程

2. **隐式流程启动**: 通过特定命令的子命令
   - 例如：`/story new 用户认证` - 创建故事并启动PRD流程
   - 例如：`/task create 实现登录API` - 创建任务并启动任务流程

> **重要**: 流程规则文件（如 story-flow.mdc）不是直接执行入口，必须通过命令来触发

## 自然语言命令解析

- 智能识别自然语言表达的命令意图
- 将自然语言转换为标准命令格式
- 提取关键信息作为命令参数
- 理解上下文和之前的交互历史
- 支持多语言输入（中文、英文）
- 对模糊表达主动提问以明确意图

### 自然语言解析示例

```
用户: "能给我看一下现在正在进行中的所有任务吗？"

系统响应:
✅ 执行命令: /task list --status=in_progress

当前进行中的任务:
1. task-002: "用户登录API实现" (75%)
2. task-004: "首页重构" (30%)
3. task-007: "性能优化" (15%)

总计: 3个任务进行中，平均完成度: 40%
```

## 命令错误处理与纠正示例

### 命令拼写错误

```
用户: "/tsak create 登录功能"

系统响应:
⚠️ 命令拼写错误: "/tsak create" 应为 "/task create"

您是否想执行: /task create "登录功能" ?
请确认或重新输入正确命令。
```

### 缺少必要参数

```
用户: "/update --status=completed"

系统响应:
⚠️ 缺少必要参数: --id (要更新的对象ID)

请提供要更新的对象ID，例如:
/update --id=task-001 --status=completed

可用的对象ID:
- task-001: "装载首页数据" (进行中)
- task-002: "用户登录功能" (进行中)
```

### 参数值无效

```
用户: "/check --type=epics"

系统响应:
⚠️ 无效的类型值: epics

可用的类型值: epic, story, task, roadmap
例如: /check --type=epic
```

## 命令引导与帮助

- 命令使用错误时提供正确用法
- 新用户提供简化的命令介绍
- 为复杂命令提供分步引导
- 关联命令之间提供导航提示
- 根据用户历史推荐相关命令
- 提供情境化的命令建议

## 实际执行步骤的透明化

当需要执行复杂命令或无法直接模拟结果时，应清晰展示实际执行步骤：

```
用户: "/update roadmap"

系统响应:
🔄 准备执行 /update roadmap 命令

将执行以下实际操作:
1. 读取 .ai/roadmap.yaml 文件
2. 分析 git 提交历史匹配任务进度
3. 更新路线图状态
4. 将更新后的数据写回文件

是否继续执行? (输入 "是" 继续)
```

## 命令交互成功示例

### 标准命令成功执行

```
用户: "/task create 实现用户头像上传功能 --story=S4.1"

系统响应:
✅ 执行命令: /task create 实现用户头像上传功能 --story=S4.1

已创建新任务!
任务ID: T4.1.2
标题: 实现用户头像上传功能
状态: 待开始
优先级: P1
所属Story: S4.1 "用户配置中心"
```

### 自然语言命令成功执行

```
用户: "创建一个关于用户注册的新故事"

系统响应:
✅ 执行命令: /story new "用户注册功能"

成功创建新故事!
ID: story-005
标题: 用户注册功能
类型: 功能
状态: 待规划

下一步操作建议:
1. 使用 "/story edit story-005" 添加详细描述
2. 使用 "/task create" 创建相关任务
3. 使用 "/flow spec" 开始详细规格设计
```

## 命令详细文档

每个命令都有详细的文档，记录在对应的规则文件中：

- [/check 命令](.cursor/rules/cmd-rules/check-cmd.mdc)
- [/update 命令](.cursor/rules/cmd-rules/update-cmd.mdc)
- [/story 命令](.cursor/rules/cmd-rules/story-cmd.mdc)
- [/task 命令](.cursor/rules/cmd-rules/task-cmd.mdc)
- [/plan 命令](.cursor/rules/cmd-rules/plan-cmd.mdc)
- [/branch 命令](.cursor/rules/cmd-rules/branch-cmd.mdc)
- [/flow 命令](.cursor/rules/cmd-rules/flow-cmd.mdc)
- [/memory 命令](.cursor/rules/cmd-rules/memory-cmd.mdc)
- [/help 命令](.cursor/rules/cmd-rules/help-cmd.mdc)

## 命令速查表

| 命令 | 子命令 | 用途 | 示例 |
|------|--------|------|------|
| `/check` | - | 检查项目状态 | `/check` |
| `/update` | roadmap | 更新路线图 | `/update roadmap` |
| `/story` | new, confirm, list | 管理用户故事 | `/story new 用户认证` |
| `/task` | create, quick, debt, start, done, list | 管理任务 | `/task create 实现API` |
| `/flow` | story, spec, coding, test, review, commit | 启动流程 | `/flow coding` |
| `/help` | - | 显示帮助 | `/help task` |

## 最佳实践

1. 使用标准子命令格式创建和管理对象
2. 任务状态变化时及时用`/update`更新并添加说明
3. 使用`/flow`命令启动完整开发流程
4. 不确定命令用法时使用`/help 命令名称`查看详细帮助
5. 命令输入错误时，参考系统提供的纠正提示
6. 尽可能使用简洁明了的命令格式，避免冗余参数
