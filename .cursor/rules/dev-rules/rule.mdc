---
description: 定义VibeCopilot项目的规则类型、模版和执行过程。应用于：(1)创建新规则时,(2)修改现有规则时,(3)查看规则标准时,(4)规则执行过程需要明确时。规则确保所有项目规则具有一致的结构、清晰的分类和高效的执行流程。
globs: ["*.mdc"]
alwaysApply: false
---

# 规则生成器

本规则定义了VibeCopilot项目中规则的标准结构、类型分类和执行流程，确保规则系统的一致性和有效性。

## 规则类型

规则按照用途和应用场景分为以下几类：

1. **核心规则(core-rules)**：影响AI整体行为的基础规则
   - 适用于：全局行为、交互模式、核心功能
   - 优先级：最高

2. **开发规则(dev-rules)**：用于显式调用的规则，通常有一组规则支撑
   - 适用于：编码标准、架构设计、代码审查
   - 优先级：高
   - 特点：需要明确调用才生效

3. **角色规则(role-rules)**：定义专家角色的规则
   - 适用于：专家角色定义、专业知识应用
   - 优先级：中
   - 特点：可以显式调用，也可以被其他规则隐式调用

4. **流程规则(flow-rules)**：过程性规则，用于流程控制
   - 适用于：开发流程、审查流程、发布流程
   - 优先级：高
   - 特点：定义人机交互模式和工作流程

5. **命令规则(command-rules)**：特定命令的处理规则
   - 适用于：命令解析、命令执行、响应格式
   - 优先级：高
   - 特点：触发特定命令时自动应用

6. **自定义规则(custom-rules)**：项目特殊的定义和配置
   - 适用于：项目特定需求、自定义规范、特殊配置
   - 优先级：中
   - 特点：针对项目特定场景定制

## 规则模板

所有规则文件应遵循以下标准结构：

```markdown
---
description: [清晰简洁的规则目的说明及应用场景]
globs: [规则自动应用的文件模式数组]
alwaysApply: [布尔值，指示规则是否应始终应用]
---

# [规则标题]

[规则目的简介]

## [章节1标题]

[章节1内容]

## [章节2标题]

[章节2内容]

...

## 关键规则

- [重要规则点1]
- [重要规则点2]
- ...

## 示例

<example>
  [规则正确应用示例]
</example>

<example type="invalid">
  [规则错误应用示例]
</example>
```

### 必要组成部分

1. **描述(description)**: 每个规则必须在前置元数据中包含清晰的描述，说明：
   - 规则的功能
   - 应用场景
   - 重要性原因

2. **文件模式(globs)**: 指定规则自动应用的文件类型

3. **始终应用(alwaysApply)**: 指定规则是否应在所有情况下应用

4. **标题和简介**: 规则名称和简要说明

5. **内容章节**: 按逻辑分类的规则内容

6. **关键规则**: 突出显示特别重要的规则点

7. **示例**: 包含正确和错误应用规则的示例

## 规则执行流程

规则执行遵循以下流程：

1. **规则识别**: 基于上下文和文件类型自动识别适用规则
   - 通过globs模式匹配文件
   - 检查alwaysApply标志
   - 分析用户请求上下文

2. **规则优先级**: 按规则类型和重要性确定优先级
   - 核心规则 > 流程规则 > 命令规则 > 开发规则 > 角色规则 > 自定义规则
   - 特定规则优先于通用规则
   - 冲突时高优先级规则覆盖低优先级规则

3. **规则应用**: 将规则内容应用于当前任务
   - 遵循规则中的具体指导
   - 应用关键规则点
   - 参考示例确保正确应用

4. **规则验证**: 检查规则应用结果
   - 与示例比较
   - 确保符合规则要求
   - 识别并修正偏差

5. **规则反馈**: 向用户提供规则应用的反馈
   - 说明应用了哪些规则
   - 解释规则如何影响结果
   - 提出基于规则的建议

## 规则保存和命名

规则文件应遵循以下保存路径和命名标准：

1. **目录存放**: 规则文件应放在与其类型对应的目录下
   - 核心规则存放在 `.cursor/rules/core-rules/` 目录
   - 开发规则存放在 `.cursor/rules/dev-rules/` 目录
   - 角色规则存放在 `.cursor/rules/role-rules/` 目录
   - 流程规则存放在 `.cursor/rules/flow-rules/` 目录
   - 命令规则存放在 `.cursor/rules/command-rules/` 目录
   - 自定义规则存放在 `.cursor/rules/custom-rules/` 目录

2. **文件命名**: 规则文件命名应遵循特定的後缀和格式
   - 命令规则使用 `-command.mdc` 作为後缀（例如：`help-command.mdc`）
   - 角色规则使用 `_expert.mdc` 作为後缀（例如：`frontend_expert.mdc`）
   - 流程规则使用 `-flow.mdc` 作为後缀（例如：`workflow-flow.mdc`）
   - 其他规则使用描述性名称加 `.mdc` 扩展名
   - 所有命名应使用小写字母和连字符（-）代替空格

3. **文件名规范**:
   - 命名简洁明确，反映规则的主要目的
   - 避免使用特殊字符或非字母数字字符
   - 避免使用非常长的文件名

## 规则质量标准

所有规则应遵循以下质量标准：

1. **简洁性**: 规则文件不应超过200行
   - 保持内容精简明确
   - 避免冗余和重复
   - 优先保留关键信息

2. **相关性**: 规则内容应与特定目标相关
   - 只包含直接相关的内容
   - 移除与规则目的无关的部分
   - 不混入其他规则的职责

## 示例

<example>
  # 规则生成示例

  用户: "创建一个TypeScript开发规则"

  响应:
  "我将为您创建TypeScript开发规则。该规则将保存在lang-rules目录中，命名为typescript-best-practices.mdc。"

  [规则内容创建]

  "已创建TypeScript最佳实践规则。该规则包含类型系统、接口与类型别名、空值处理和异步模式等章节。该规则将自动应用于项目中所有.ts和.tsx文件。规则执行时将确保代码遵循TypeScript最佳实践，提高代码质量和类型安全性。 🚀"
</example>

<example type="invalid">
  # 不当规则生成

  用户: "创建一个规则"

  响应:
  "这是规则:"

  ```
  # 开发规则

  写好代码。

  - 使用好的编码习惯
  - 避免错误
  ```

  问题:
  - 没有proper前置元数据和描述
  - 缺少文件模式定义
  - 指导模糊不具体
  - 没有示例
  - 缺少规则类型和执行流程说明
  - 没有应用场景描述
</example>
