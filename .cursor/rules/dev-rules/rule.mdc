---
description: 定义VibeCopilot项目的规则类型、模版和执行过程。应用于：(1)创建新规则时,(2)修改现有规则时,(3)查看规则标准时,(4)规则执行过程需要明确时。规则确保所有项目规则具有一致的结构、清晰的分类和高效的执行流程。
globs: ["*.mdc"]
alwaysApply: false
---

# VibeCopilot 规则系统

本规则定义了VibeCopilot项目中规则的基本概念、标准结构、类型分类和执行流程，确保规则系统的一致性和有效性。

## 关键概念

- **规则系统**：VibeCopilot使用的结构化指导，确保AI行为一致、可预测
- **规则类型**：根据用途和范围分类的不同规则种类
- **规则执行**：AI应用规则的过程，包括识别、优先级排序、应用和验证
- **规则管理**：通过`/rule`命令进行的规则操作，详见`rule-command.mdc`
- **规则引用**：使用`{/rule}`格式表示提及规则系统而非执行命令

## 规则类型

规则按照用途和应用场景分为以下几类：

1. **核心规则(core-rules)**：影响AI整体行为的基础规则
   - 适用于：全局行为、交互模式、核心功能
   - 优先级：最高

2. **开发规则(dev-rules)**：用于显式调用的规则，通常有一组规则支撑
   - 适用于：编码标准、架构设计、代码审查
   - 优先级：高
   - 特点：需要明确调用才生效

3. **角色规则(role-rules)**：定义专家角色的规则
   - 适用于：专家角色定义、专业知识应用
   - 优先级：中
   - 特点：可以显式调用，也可以被其他规则隐式调用

4. **流程规则(flow-rules)**：过程性规则，用于流程控制
   - 适用于：开发流程、审查流程、发布流程
   - 优先级：高
   - 特点：定义人机交互模式和工作流程

5. **命令规则(command-rules)**：特定命令的处理规则
   - 适用于：命令解析、命令执行、响应格式
   - 优先级：高
   - 特点：触发特定命令时自动应用

6. **自定义规则(custom-rules)**：项目特殊的定义和配置
   - 适用于：项目特定需求、自定义规范、特殊配置
   - 优先级：中
   - 特点：针对项目特定场景定制

## 命令与规则的关系

- 规则系统通过`/rule`命令管理，详细命令格式参见`rule-command.mdc`
- 提及规则系统但不执行命令时，使用`{/rule}`格式
- 引用特定规则时，使用`@规则名称`格式，如`@vibe_convention.mdc`

## 规则模板

所有规则文件应遵循以下标准结构：

```markdown
---
description: [清晰简洁的规则目的说明及应用场景]
globs: [规则自动应用的文件模式数组]
alwaysApply: [布尔值，指示规则是否应始终应用]
---

# [规则标题]

[规则目的简介]

## [章节1标题]

[章节1内容]

## [章节2标题]

[章节2内容]

...

## 关键规则

- [重要规则点1]
- [重要规则点2]
- ...

## 示例

<example>
  [规则正确应用示例]
</example>

<example type="invalid">
  [规则错误应用示例]
</example>
```

### 必要组成部分

1. **描述(description)**: 每个规则必须在前置元数据中包含清晰的描述，说明：
   - 规则的功能
   - 应用场景
   - 重要性原因

2. **文件模式(globs)**: 指定规则自动应用的文件类型

3. **始终应用(alwaysApply)**: 指定规则是否应在所有情况下应用

4. **标题和简介**: 规则名称和简要说明

5. **内容章节**: 按逻辑分类的规则内容

6. **关键规则**: 突出显示特别重要的规则点

7. **示例**: 包含正确和错误应用规则的示例

## 规则执行流程

规则执行遵循以下流程：

1. **规则识别**: 基于上下文和文件类型自动识别适用规则
   - 通过globs模式匹配文件
   - 检查alwaysApply标志
   - 分析用户请求上下文

2. **规则优先级**: 按规则类型和重要性确定优先级
   - 核心规则 > 流程规则 > 命令规则 > 开发规则 > 角色规则 > 自定义规则
   - 特定规则优先于通用规则
   - 冲突时高优先级规则覆盖低优先级规则

3. **规则应用**: 将规则内容应用于当前任务
   - 遵循规则中的具体指导
   - 应用关键规则点
   - 参考示例确保正确应用

4. **规则验证**: 检查规则应用结果
   - 与示例比较
   - 确保符合规则要求
   - 识别并修正偏差

5. **规则反馈**: 向用户提供规则应用的反馈
   - 说明应用了哪些规则
   - 解释规则如何影响结果
   - 提出基于规则的建议

## 规则保存和命名

规则文件应遵循以下保存路径和命名标准：

1. **目录存放**: 规则文件应放在与其类型对应的目录下
   - 核心规则存放在 `.cursor/rules/core-rules/` 目录
   - 开发规则存放在 `.cursor/rules/dev-rules/` 目录
   - 角色规则存放在 `.cursor/rules/role-rules/` 目录
   - 流程规则存放在 `.cursor/rules/flow-rules/` 目录
   - 命令规则存放在 `.cursor/rules/command-rules/` 目录
   - 自定义规则存放在 `.cursor/rules/custom-rules/` 目录

2. **文件命名**: 规则文件命名应遵循特定的後缀和格式
   - 命令规则使用 `-command.mdc` 作为後缀（例如：`help-command.mdc`）
   - 角色规则使用 `_expert.mdc` 作为後缀（例如：`frontend_expert.mdc`）
   - 流程规则使用 `-flow.mdc` 作为後缀（例如：`workflow-flow.mdc`）
   - 其他规则使用描述性名称加 `.mdc` 扩展名
   - 所有命名应使用小写字母和连字符（-）代替空格

## 规则质量标准

所有规则应遵循以下质量标准：

1. **简洁性**: 规则文件不应超过200行
   - 保持内容精简明确
   - 避免冗余和重复
   - 优先保留关键信息

2. **相关性**: 规则内容应与特定目标相关
   - 只包含直接相关的内容
   - 移除与规则目的无关的部分
   - 不混入其他规则的职责

## 命令规则特殊标准

所有命令规则特别需要遵循以下特殊标准，详细执行标准参见`rule-command.mdc`：

1. **脚本关联**: 每个命令规则必须明确指定使用的脚本和方法
2. **功能集中**: 相似功能应合并到同一命令下，避免功能分散
3. **统一调用方式**: 命令调用应保持一致的格式和风格
4. **文档完整性**: 清晰说明命令的用途和使用场景

## 示例

<example>
  # 正确的规则引用和讨论

  用户: "说到{/rule}系统，它如何帮助维护代码质量？"

  系统响应:
  ```
  VibeCopilot的规则系统通过结构化指导确保代码质量和一致性。规则分为几种类型，包括:

  1. 开发规则：定义编码标准和架构设计原则
  2. 命令规则：确保命令执行的一致性
  3. 流程规则：管理整个开发周期的质量控制

  这些规则互相配合，形成一个完整的质量保障体系，从而使代码更易维护、更具可扩展性。
  ```

  # 规则应用示例

  用户: "创建一个新的TypeScript规则"

  系统响应:
  ```
  要创建新的TypeScript规则，应遵循规则系统的标准结构。我将帮您准备一个TypeScript最佳实践规则:

  文件位置: .cursor/rules/ts-rules/typescript-best-practices.mdc

  规则必须包含:
  - 前置元数据（描述、globs、alwaysApply）
  - 规则标题和简介
  - 关键规则点
  - 正确和错误应用的示例

  要完成规则创建，可以使用: /rule create typescript-best-practices --type=ts
  ```
</example>

<example type="invalid">
  # 错误的规则引用理解

  用户: "我想了解一下{/rule}命令的用法"

  系统响应:
  ```
  已激活规则管理系统，准备执行规则命令。

  请问您想要执行哪种规则操作？
  1. 创建新规则
  2. 修改现有规则
  3. 查看规则列表
  ```

  问题: 系统误将{/rule}理解为执行命令，而非讨论规则系统

  # 错误的规则创建示例

  用户: "创建一个规则"

  系统响应:
  ```
  已创建规则:

  # 新规则

  好好写代码，避免问题。
  ```

  问题: 未遵循规则模板和结构要求，缺少必要组成部分
</example>

# VibeCopilot 规则系统标准

## 核心原则

1. **规则完整性**：每个规则必须包含完整的定义和执行标准
2. **行为明确性**：规则必须明确定义AI和系统的行为方式
3. **可验证性**：规则执行效果必须可以被验证和评估
4. **一致性**：所有规则必须遵循统一的格式和标准
5. **可维护性**：规则应易于更新和维护

## 规则质量标准

### 1. 基本结构要求

- 必须包含frontmatter（description、globs、alwaysApply）
- 必须有清晰的标题和章节结构
- 必须包含示例（正确和错误的示例）
- 文件长度控制在300行以内

### 2. 内容质量要求

- 描述必须清晰、准确、无歧义
- 规则之间不能相互冲突
- 必须包含规则的适用范围和限制条件
- 必须说明规则的执行后果和影响

### 3. 命令规则特殊标准

#### 3.1 基础要求
- 明确命令的触发条件和使用场景
- 定义完整的参数列表和格式要求
- 提供清晰的使用示例和错误处理方案
- 说明命令的执行流程和预期结果

#### 3.2 脚本关联规范
- 必须明确指定关联的脚本文件
  ```yaml
  script:
    path: scripts/example/script.py
    type: python
    permissions: ["read", "write"]
  ```
- 说明脚本的调用方式和参数传递
- 定义脚本的输入输出格式
- 指定错误处理和日志记录方式

#### 3.3 行为规范
- 定义AI助手在执行命令时的行为标准
- 规定用户输入验证和参数检查方式
- 明确命令执行的前置条件和后置处理
- 规定命令的超时处理和中断机制

#### 3.4 集成规范
- 说明与其他命令的集成方式
- 定义数据流转和状态管理
- 规定资源访问和权限控制
- 明确配置管理和环境要求

#### 3.5 质量保证
- 定义测试要求和覆盖率标准
- 规定性能指标和响应时间
- 要求错误率和可用性标准
- 明确文档更新和维护要求

### 4. 规则执行标准

#### 4.1 执行前检查
- 验证规则的完整性和有效性
- 检查依赖项和环境要求
- 确认执行权限和资源可用性

#### 4.2 执行过程监控
- 记录执行步骤和状态
- 监控资源使用和性能指标
- 捕获和处理异常情况

#### 4.3 执行结果验证
- 验证输出结果的正确性
- 检查副作用和影响范围
- 确认清理和恢复操作

## 规则模板

### 命令规则模板

```markdown
---
description: 命令的目的和使用场景
globs: 适用的文件模式
alwaysApply: false
---

# 命令名称

## 命令定义

- 触发条件：何时使用此命令
- 执行效果：命令执行后的预期结果
- 使用限制：使用的约束条件

## 脚本关联

- 脚本路径：scripts/example/script.py
- 执行方式：python/shell/其他
- 必要权限：读取/写入/执行
- 资源要求：内存/CPU/磁盘

## 参数定义

- 必填参数
  - param1: 说明和格式要求
  - param2: 说明和格式要求

- 可选参数
  - option1: 默认值和说明
  - option2: 默认值和说明

## 执行流程

1. 前置检查
   - 环境验证
   - 参数验证
   - 权限检查

2. 执行步骤
   - 步骤1：具体操作
   - 步骤2：具体操作

3. 结果处理
   - 成功处理
   - 错误处理
   - 资源清理

## 使用示例

### 正确示例
```bash
/command --param1=value1 --param2=value2
```

### 错误示例
```bash
/command -p value  # 错误：使用了不支持的参数格式
```

## 错误处理

| 错误类型 | 错误描述 | 处理方式 |
|---------|---------|---------|
| 参数错误 | 参数格式不正确 | 提示正确格式 |
| 执行失败 | 脚本执行异常 | 回滚操作 |

## 集成说明

- 前置命令：需要先执行的命令
- 后置命令：可以后续执行的命令
- 关联命令：相关的其他命令
```

## 规则验证清单

1. 基础验证
   - [ ] 文件名符合规范
   - [ ] Frontmatter完整
   - [ ] 结构清晰完整
   - [ ] 示例充分

2. 内容验证
   - [ ] 描述清晰准确
   - [ ] 无规则冲突
   - [ ] 执行标准明确
   - [ ] 错误处理完善

3. 命令规则特殊验证
   - [ ] 脚本关联完整
   - [ ] 参数定义清晰
   - [ ] 执行流程明确
   - [ ] 集成规范合理

## 示例

<example>
# 正确的规则定义示例

---
description: Git提交规范检查命令，用于验证提交信息是否符合项目规范
globs: .git/*
alwaysApply: false
---

# Git提交规范检查

## 命令定义
- 触发条件：执行git commit时
- 执行效果：验证提交信息格式
- 使用限制：仅在git仓库中有效

## 脚本关联
script:
  path: scripts/git/commit-check.sh
  type: shell
  permissions: ["read"]

## 参数定义
- --strict: 严格模式检查
- --fix: 自动修复格式问题

## 执行流程
1. 读取提交信息
2. 验证格式规范
3. 返回检查结果

## 错误处理
- 格式错误：提示正确格式
- 执行失败：显示错误原因
</example>

<example type="invalid">
# 错误的规则定义示例

# Git提交检查
- 检查git提交
- 运行脚本
- 显示结果

注：缺少frontmatter、结构混乱、说明不清晰、无执行标准
</example>
