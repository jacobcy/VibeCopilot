---
description: 定义VibeCopilot项目的规则类型、模版和执行过程。应用于：(1)创建新规则时,(2)修改现有规则时,(3)查看规则标准时,(4)规则执行过程需要明确时。规则确保所有项目规则具有一致的结构、清晰的分类和高效的执行流程。
globs: ["*.mdc"]
alwaysApply: false
---

# VibeCopilot 规则系统标准

## 核心原则

1. **规则完整性**：每个规则必须包含完整的定义和执行标准
2. **行为明确性**：规则必须明确定义AI和系统的行为方式
3. **可验证性**：规则执行效果必须可以被验证和评估
4. **一致性**：所有规则必须遵循统一的格式和标准
5. **可维护性**：规则应易于更新和维护

## 规则质量标准

### 1. 基本结构要求

- 必须包含frontmatter（description、globs、alwaysApply）
- 必须有清晰的标题和章节结构
- 必须包含示例（正确和错误的示例）
- 文件长度控制在300行以内

### 2. 内容质量要求

- 描述必须清晰、准确、无歧义
- 规则之间不能相互冲突
- 必须包含规则的适用范围和限制条件
- 必须说明规则的执行后果和影响

### 3. 命令规则特殊标准

#### 3.1 基础要求
- 明确命令的触发条件和使用场景
- 定义完整的参数列表和格式要求
- 提供清晰的使用示例和错误处理方案
- 说明命令的执行流程和预期结果

#### 3.2 脚本关联规范
- 必须明确指定关联的脚本文件
  ```yaml
  script:
    path: scripts/example/script.py
    type: python
    permissions: ["read", "write"]
  ```
- 说明脚本的调用方式和参数传递
- 定义脚本的输入输出格式
- 指定错误处理和日志记录方式

#### 3.3 行为规范
- 定义AI助手在执行命令时的行为标准
- 规定用户输入验证和参数检查方式
- 明确命令执行的前置条件和后置处理
- 规定命令的超时处理和中断机制

#### 3.4 集成规范
- 说明与其他命令的集成方式
- 定义数据流转和状态管理
- 规定资源访问和权限控制
- 明确配置管理和环境要求

#### 3.5 质量保证
- 定义测试要求和覆盖率标准
- 规定性能指标和响应时间
- 要求错误率和可用性标准
- 明确文档更新和维护要求

### 4. 规则执行标准

#### 4.1 执行前检查
- 验证规则的完整性和有效性
- 检查依赖项和环境要求
- 确认执行权限和资源可用性

#### 4.2 执行过程监控
- 记录执行步骤和状态
- 监控资源使用和性能指标
- 捕获和处理异常情况

#### 4.3 执行结果验证
- 验证输出结果的正确性
- 检查副作用和影响范围
- 确认清理和恢复操作

## 规则模板

### 命令规则模板

```markdown
---
description: 命令的目的和使用场景
globs: 适用的文件模式
alwaysApply: false
---

# 命令名称

## 命令定义

- 触发条件：何时使用此命令
- 执行效果：命令执行后的预期结果
- 使用限制：使用的约束条件

## 脚本关联

- 脚本路径：scripts/example/script.py
- 执行方式：python/shell/其他
- 必要权限：读取/写入/执行
- 资源要求：内存/CPU/磁盘

## 参数定义

- 必填参数
  - param1: 说明和格式要求
  - param2: 说明和格式要求

- 可选参数
  - option1: 默认值和说明
  - option2: 默认值和说明

## 执行流程

1. 前置检查
   - 环境验证
   - 参数验证
   - 权限检查

2. 执行步骤
   - 步骤1：具体操作
   - 步骤2：具体操作

3. 结果处理
   - 成功处理
   - 错误处理
   - 资源清理

## 使用示例

### 正确示例
```bash
/command --param1=value1 --param2=value2
```

### 错误示例
```bash
/command -p value  # 错误：使用了不支持的参数格式
```

## 错误处理

| 错误类型 | 错误描述 | 处理方式 |
|---------|---------|---------|
| 参数错误 | 参数格式不正确 | 提示正确格式 |
| 执行失败 | 脚本执行异常 | 回滚操作 |

## 集成说明

- 前置命令：需要先执行的命令
- 后置命令：可以后续执行的命令
- 关联命令：相关的其他命令
```

## 规则验证清单

1. 基础验证
   - [ ] 文件名符合规范
   - [ ] Frontmatter完整
   - [ ] 结构清晰完整
   - [ ] 示例充分

2. 内容验证
   - [ ] 描述清晰准确
   - [ ] 无规则冲突
   - [ ] 执行标准明确
   - [ ] 错误处理完善

3. 命令规则特殊验证
   - [ ] 脚本关联完整
   - [ ] 参数定义清晰
   - [ ] 执行流程明确
   - [ ] 集成规范合理

## 示例

<example>
# 正确的规则定义示例

---
description: Git提交规范检查命令，用于验证提交信息是否符合项目规范
globs: .git/*
alwaysApply: false
---

# Git提交规范检查

## 命令定义
- 触发条件：执行git commit时
- 执行效果：验证提交信息格式
- 使用限制：仅在git仓库中有效

## 脚本关联
script:
  path: scripts/git/commit-check.sh
  type: shell
  permissions: ["read"]

## 参数定义
- --strict: 严格模式检查
- --fix: 自动修复格式问题

## 执行流程
1. 读取提交信息
2. 验证格式规范
3. 返回检查结果

## 错误处理
- 格式错误：提示正确格式
- 执行失败：显示错误原因
</example>

<example type="invalid">
# 错误的规则定义示例

# Git提交检查
- 检查git提交
- 运行脚本
- 显示结果

注：缺少frontmatter、结构混乱、说明不清晰、无执行标准
</example>
