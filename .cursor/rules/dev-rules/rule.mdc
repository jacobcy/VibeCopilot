---
description: 定义VibeCopilot项目的规则类型、模版和执行过程。应用于：(1)创建新规则时,(2)修改现有规则时,(3)查看规则标准时,(4)规则执行过程需要明确时。规则确保所有项目规则具有一致的结构、清晰的分类和高效的执行流程。
globs: ["*.mdc"]
alwaysApply: false
---

# VibeCopilot 规则系统标准

## 关键概念

- **规则系统**：VibeCopilot使用的结构化指导，确保AI行为一致、可预测
- **规则类型**：根据用途和范围分类的不同规则种类
- **规则执行**：AI应用规则的过程，包括识别、优先级排序、应用和验证
- **规则管理**：通过`/rule`命令进行的规则操作，详见`rule-cmd.mdc`
- **规则引用**：使用`{/rule}`格式表示提及规则系统而非执行命令

## 规则类型

规则按照用途和应用场景分为以下几类：

1. **核心规则(core-rules)**：定义基础行为和标准，如rule-generating-agent
2. **开发规则(dev-rules)**：规范开发流程和代码质量，如vibe_convention、vibe_config
3. **流程规则(flow-rules)**：定义开发生命周期和强制检查点，如workflow-instruction、coding-flow
4. **命令规则(cmd-rules)**：实现标准化命令接口，如plan-cmd、task-cmd
5. **角色规则(role-rules)**：定义专家角色和职责，如frontend_expert、backend_expert
6. **工具规则(plugin-rules)**：规范工具使用方法，如git-commit-push-plugin

## 命令与规则的关系

- 规则系统通过`/rule`命令管理，详细命令格式参见`rule-cmd.mdc`
- 提及规则系统但不执行命令时，使用`{/rule}`格式

## 规则模板

VibeCopilot提供以下规则模板，用于创建不同类型的规则：

1. **核心规则模板**：`.cursor/templates/rules/core-rule-template.md`
   - 用途：创建项目基础规则
   - 特点：通常设置为始终应用(alwaysApply: true)
   - 适用：项目根本性原则、基础行为标准

2. **开发规则模板**：`.cursor/templates/rules/dev-rule-template.md`
   - 用途：创建开发标准和最佳实践
   - 特点：包含代码组织、编码标准、性能要求
   - 适用：具体开发领域或技术规范

3. **命令规则模板**：`.cursor/templates/rules/cmd-rule-template.md`
   - 用途：创建可执行命令规则
   - 特点：定义参数、执行流程和错误处理
   - 适用：创建新的CLI命令或操作流程

4. **流程规则模板**：`.cursor/templates/rules/flow-rule-template.md`
   - 用途：创建开发流程和生命周期规则
   - 特点：包含流程步骤、检查点和流程图
   - 适用：定义完整开发流程或流程阶段

5. **角色规则模板**：`.cursor/templates/rules/role-rule-template.md`
   - 用途：创建专家角色定义
   - 特点：包含专业背景、职责和决策权限
   - 适用：定义特定领域专家的行为模式

6. **工具规则模板**：`.cursor/templates/rules/plugin-rule-template.md`
   - 用途：创建工具使用规范
   - 特点：包含脚本关联、参数定义和执行流程
   - 适用：定义与特定工具相关的使用标准

### 模板使用流程

1. 选择合适的规则模板
2. 通过`/rule create`命令创建新规则
3. 基于模板内容填充实际规则内容
4. 保存并应用新规则

### 必要组成部分

1. **描述(description)**: 每个规则必须在前置元数据中包含清晰的描述，说明：
   - 规则的功能
   - 应用场景
   - 重要性原因

2. **文件模式(globs)**: 指定规则自动应用的文件类型

3. **始终应用(alwaysApply)**: 指定规则是否应在所有情况下应用

4. **标题和简介**: 规则名称和简要说明

5. **内容章节**: 按逻辑分类的规则内容

6. **关键规则**: 突出显示特别重要的规则点

7. **示例**: 包含正确和错误应用规则的示例

## 规则执行流程

规则执行遵循以下流程：

1. **规则识别**: 基于上下文和文件类型自动识别适用规则
   - 通过globs模式匹配文件
   - 检查alwaysApply标志
   - 分析用户请求上下文

2. **规则优先级**: 按规则类型和重要性确定优先级
   - 核心规则 > 流程规则 > 命令规则 > 开发规则 > 角色规则 > 自定义规则
   - 特定规则优先于通用规则
   - 冲突时高优先级规则覆盖低优先级规则

3. **规则应用**: 将规则内容应用于当前任务
   - 遵循规则中的具体指导
   - 应用关键规则点
   - 参考示例确保正确应用

4. **规则验证**: 检查规则应用结果
   - 与示例比较
   - 确保符合规则要求
   - 识别并修正偏差

5. **规则反馈**: 向用户提供规则应用的反馈
   - 说明应用了哪些规则
   - 解释规则如何影响结果
   - 提出基于规则的建议

## 规则保存和命名

规则文件应遵循以下保存路径和命名标准：

1. **目录存放**: 规则文件应放在与其类型对应的目录下
   - 核心规则存放在 `.cursor/rules/core-rules/` 目录
   - 开发规则存放在 `.cursor/rules/dev-rules/` 目录
   - 角色规则存放在 `.cursor/rules/role-rules/` 目录
   - 流程规则存放在 `.cursor/rules/flow-rules/` 目录
   - 命令规则存放在 `.cursor/rules/cmd-rules/` 目录
   - 工具规则存放在 `.cursor/rules/plugin-rules/` 目录

2. **文件命名**: 规则文件命名应遵循特定的後缀和格式
   - 命令规则使用 `-cmd.mdc` 作为後缀（例如：`help-cmd.mdc`）
   - 角色规则使用 `_expert.mdc` 作为後缀（例如：`frontend_expert.mdc`）
   - 流程规则使用 `-flow.mdc` 作为後缀（例如：`workflow-flow.mdc`）
   - 工具规则使用 `-plugin.mdc` 作为后缀（例如：`github-plugin.mdc`）
   - 其他规则使用描述性名称加 `.mdc` 扩展名
   - 所有命名应使用小写字母和连字符（-）代替空格

## 规则质量标准

所有规则应遵循以下质量标准：

1. **简洁性**: 规则文件不应超过200行
   - 保持内容精简明确
   - 避免冗余和重复
   - 优先保留关键信息

2. **相关性**: 规则内容应与特定目标相关
   - 只包含直接相关的内容
   - 移除与规则目的无关的部分
   - 不混入其他规则的职责

## 工具规则特殊标准

所有工具规则需要遵循以下特殊标准，详细执行标准参见`rule-cmd.mdc`：

1. **脚本关联**: 每个命令规则必须明确指定使用的脚本和方法
2. **功能集中**: 相似功能应合并到同一命令下，避免功能分散
3. **统一调用方式**: 命令调用应保持一致的格式和风格
4. **文档完整性**: 清晰说明命令的用途和使用场景

## 示例

<example>
# 正确的规则定义示例

---
description: Git提交规范检查命令，用于验证提交信息是否符合项目规范。应用于：(1)执行git commit操作前，(2)代码审查过程中，(3)设置项目git钩子时。
globs: .git/*
alwaysApply: false
---

# Git提交规范检查

本规则定义了项目Git提交信息的标准格式和验证方法。

## 提交信息格式

提交信息必须遵循以下格式：
`<类型>(<范围>): <描述>`

## 关键规则

- 类型必须为以下之一：feat, fix, docs, style, refactor, test, chore
- 描述必须简洁明了，不超过50个字符
- 不允许提交信息缺少类型前缀
- 范围部分可选，但必须使用小括号包围

## 脚本关联
script:
  path: scripts/git/commit-check.sh
  type: shell
  permissions: ["read"]
</example>

<example type="invalid">
# 错误的规则定义示例

# Git提交检查

- 检查git提交
- 运行脚本验证格式
- 显示结果给用户

注：此示例缺少frontmatter、结构混乱、没有明确的规则分类和标准
</example>
