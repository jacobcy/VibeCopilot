---
description: 本规则提供了一系列简洁易用的开发命令，应在以下情况下应用：(1)需要查看可用命令时，(2)检查项目开发进度时，(3)更新开发状态时，(4)管理开发任务时，(5)创建或切换开发分支时，(6)查看或更新项目文档时。规则确保开发过程的便捷性和标准化，特别关注命令解析、响应速度和用户体验。
globs:
alwaysApply: false
---

# VibeCopilot 命令系统

## 基本概念

VibeCopilot命令系统是一套基于自然语言的开发辅助工具，集成了GitHub Projects和本地roadmap.yaml文件用于项目管理。核心设计理念是通过简单直观的命令帮助开发者跟踪、更新和管理项目进度。

命令以`/`开头，支持参数和选项，同时兼容自然语言变体形式。例如，`/check --type=epic`和`请检查所有epic的状态`可能产生相同的结果。

## 符号约定

VibeCopilot中使用的特殊符号具有明确的含义：

- **`/` 符号**：命令执行标识，用于触发命令执行
  - 例如：`/story new 用户认证功能` - 执行创建新故事命令
  - 所有需要执行的操作都应使用`/`开头

- **`{/规则名称}` 格式**：命令注释标识，用于消除命令歧义，不会执行命令
  - 例如：`{/agent}` - 表示提及agent命令，而非执行
  - 例如：`/task(任务命令) task(任务实体) {/task}(命令标识)` - 区分不同概念
  - 适用于需要区分相似命令、实体或概念的场景

- **`@` 符号**：引用标识，用于引用规则、模板或专家角色，不触发执行
  - 例如：`@frontend_expert` - 引用前端专家角色
  - 例如：`@story-template.md` - 引用故事模板
  - 使用`@规则名称`不会触发规则执行，只是一个引用

- **`--` 符号**：命令参数标识，用于传递命令参数
  - 例如：`--id=S1.2` - 指定故事ID参数

- **`#` 符号**：标签标识，用于标记内容类型或分类
  - 例如：`#bug` - 表示这是一个bug

> **重要**：不要使用`@flow-rules/story-flow.mdc`的形式来尝试执行流程，这只是引用而非执行。正确的执行方式是使用`/flow story`或`/story new`命令。当需要提及命令但不执行时，使用`{/flow}`格式进行注释。

## 命令架构

VibeCopilot命令系统包含以下核心命令：

1. **`/check`**: 检查项目状态和进度
2. **`/update`**: 更新对象状态和进度
3. **`/story`**: 管理开发故事和阶段
4. **`/task`**: 管理项目任务
5. **`/plan`**: 创建新计划和任务
6. **`/branch`**: 管理与任务关联的分支
7. **`/flow`**: 启动和管理开发流程
8. **`/memory`**: 管理项目知识库
9. **`/help`**: 显示命令帮助信息
10. **`/agent`**: 激活专家角色系统
11. **`/rule`**: 管理规则系统

## 命令使用规范

- 命令使用正斜杠（`/`）开头，如`/help`、`/check`、`/update`
- 标准参数使用双连字符（`--`）开头，如`--id=task-001`
- 支持自然语言输入，系统会智能解析用户意图
- 当命令被引号包裹时（如`"/help"`），应视为指引用户使用该命令，而非执行命令
- 当遇到引号包裹的命令时：
  - 提示用户去掉引号直接使用该命令
  - 解释命令的用途和用法
  - 不执行该命令，等待用户正确输入
- 命令文档引用时使用反引号包裹，如：`/update roadmap --check`
- 所有命令的详细用法可通过`/help [命令名]`查看
- 命令输入应简洁，避免冗余参数

### 灵活的命令解析原则

- 不严格要求用户使用完整的命令参数格式
- 支持多种表达形式，只要意图明确不引起歧义即可
- 当输入不完整但意图明确时，自动补全必要参数
- 当输入存在歧义时，通过有针对性的提问引导用户明确意图
- 优先解析用户的实际意图，而非死板要求固定格式

### 命令执行真实性

- 严格禁止返回模拟或假设的命令执行结果
- 只返回实际执行操作后的真实结果
- 当无法实际执行命令时，必须明确说明情况而不是假装已完成
- 在展示命令示例时，必须明确标记为“示例”
- 涉及文件变更、状态更新的操作必须实际执行，不得模拟
- 代替模拟输出，应该详细说明将要执行的实际步骤

### 命令处理示例

```
用户: "/update roadmap"

系统响应:
要使用更新路线图命令，请直接输入:
/update roadmap

该命令将检查.ai目录中Story的进度，并同步到路线图和GitHub。
```

```
用户: "更新任务4为已完成"

系统响应:
✅ 执行命令: /update --id=task-004 --status=completed

任务更新成功!
task-004 "用户认证功能" 已标记为已完成
所属故事 story-001 进度: 75% (℥3%)
```

```
用户: "检查一下路线图"

系统响应:
✅ 执行命令: /update roadmap --check

路线图检查完成!
分析了最近30天的提交历史，发现项目进度如下:
- 用户认证: 75% 🚧
- 数据存储: 100% ✅
- 界面优化: 30% 🚧
```

## 统一命令格式

所有命令遵循一致的格式规范：

```
/命令名称 [子命令] [参数]
```

- **命令名称**: 主命令，如 story, task, flow 等
- **子命令**: 可选，指定具体操作，如 new, list, start, done 等
- **参数**: 可选，使用 --key=value 格式传递

### 子命令标准

所有命令都支持以下标准子命令格式：

- **无子命令**: 显示当前对象信息（如 `/task` 显示当前任务）
- **new/create**: 创建新对象（如 `/story new 标题`）
- **list**: 列出对象列表（如 `/task list`）
- **start**: 开始执行（如 `/task start T1.2`）
- **done/complete**: 完成对象（如 `/task done T1.2`）

## 流程执行规则

在VibeCopilot中，命令(Command)和流程(Flow)是两个不同的概念：

- **命令(Command)**：单一操作，执行特定功能，如显示信息、创建对象等
- **流程(Flow)**：一系列步骤的集合，定义完整的工作流程

流程通过两种方式启动：

1. **直接流程命令**: 使用 `/flow <流程名称>` 命令
   - 例如：`/flow story` - 启动完整故事流程
   - 例如：`/flow commit` - 启动代码提交流程

2. **隐式流程启动**: 通过特定命令的子命令
   - 例如：`/story new 用户认证` - 创建故事并启动PRD流程
   - 例如：`/task create 实现登录API` - 创建任务并启动任务流程

> **重要**: 流程规则文件（如 story-flow.mdc）不是直接执行入口，必须通过命令来触发

## 命令详细文档

每个命令都有详细的文档，记录在对应的规则文件中：

- [/check 命令](.cursor/rules/cmd-rules/check-cmd.mdc)
- [/update 命令](.cursor/rules/cmd-rules/update-cmd.mdc)
- [/story 命令](.cursor/rules/cmd-rules/story-cmd.mdc)
- [/task 命令](.cursor/rules/cmd-rules/task-cmd.mdc)
- [/plan 命令](.cursor/rules/cmd-rules/plan-cmd.mdc)
- [/branch 命令](.cursor/rules/cmd-rules/branch-cmd.mdc)
- [/flow 命令](.cursor/rules/cmd-rules/flow-cmd.mdc)
- [/memory 命令](.cursor/rules/cmd-rules/memory-cmd.mdc)
- [/help 命令](.cursor/rules/cmd-rules/help-cmd.mdc)

## 命令速查表

| 命令 | 子命令 | 用途 | 示例 |
|------|--------|------|------|
| `/check` | - | 检查项目状态 | `/check` |
| `/update` | roadmap | 更新路线图 | `/update roadmap` |
| `/story` | new, confirm, list | 管理用户故事 | `/story new 用户认证` |
| `/task` | create, quick, debt, start, done, list | 管理任务 | `/task create 实现API` |
| `/flow` | story, spec, coding, test, review, commit | 启动流程 | `/flow coding` |
| `/help` | - | 显示帮助 | `/help task` |

## 最佳实践

1. 使用标准子命令格式创建和管理对象
2. 任务状态变化时及时用`/update`更新并添加说明
3. 使用`/flow`命令启动完整开发流程
4. 不确定命令用法时使用`/help 命令名称`查看详细帮助

## 命令解析与执行

- 所有命令以`/`开头，表明这是一个特殊命令
- 命令参数使用`--参数名=值`的格式
- 命令将由系统自动解析并执行相关操作
- 系统支持自然语言输入，可智能识别用户意图
- 当用户输入不完整但意图明确时，系统会自动补全参数
- 当用户输入有歧义时，系统会提出澄清问题
- 当命令格式不正确时，系统会提示正确的用法

### 命令格式示例

```
# 标准格式
/update --id=task-001 --status=completed

# 自然语言格式（等效）
将任务1标记为已完成
task-001已完成
更新任务状态：task-001完成
```

### 命令响应规范

- 命令执行成功后，返回格式化的响应
- 命令执行失败时，返回详细的错误信息
- 当输入有歧义时，返回澄清问题
- 若识别出自然语言意图，先显示解析后的标准命令

### 命令执行真实性

- 严格禁止返回模拟或假设的命令执行结果
- 只返回实际执行操作后的真实结果
- 当无法实际执行命令时，必须明确说明原因
- 当展示示例或预期结果时，必须清晰标记为"示例"或"预期结果"
- 所有需要文件操作、状态更改的命令必须实际执行，不得模拟结果

**正确做法示例**：
```
# 当无法实际执行命令时
用户: "/update roadmap --check"

系统响应:
⚠️ 无法执行此命令
原因: 需要访问git历史和路线图文件进行实际分析
建议操作: 我将执行以下实际操作
1. 读取git历史
2. 分析项目文件
3. 更新路线图文件
```

**错误做法示例**：
```
# 模拟命令输出（严禁）
用户: "/update roadmap --check"

系统响应:
📊 路线图检查完成!
分析了30天112次提交，识别4个模块变更，3个未更新任务
更新内容:
- GitDiagram集成: 100% ✅
- 命令系统开发: 65% 🚧
- 知识库管理: 0% 📝
```
