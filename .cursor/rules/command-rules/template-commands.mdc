---
id: template-system
title: 模板系统规则
description: 当用户输入/template或//template命令时,管理模版，通过模版创建文档
type: rule
status: active
version: 1.0.0
tags:
  - command-rule
  - template
  - system
---

# VibeCopilot模板系统规则

## 模板系统概述

VibeCopilot使用结构化的模板系统来生成规则、文档和其他结构化内容。模板系统允许从结构化数据源生成高质量、一致的内容。

## 命令用法

当用户输入`/template`命令时，应执行以下操作，所有命令与CLI命令`vibecopilot template`相对应：

| 命令 | 描述 | 参数 | 用法示例 |
|------|------|------|---------|
| `/template list` | 列出所有可用模板 | `--type=<template_type>` - 按类型筛选<br>`--verbose` - 显示详细信息 | `/template list --type=doc --verbose` |
| `/template show` | 查看特定模板详情 | `<id>` - 模板ID (必填)<br>`--format=<json\|text>` - 输出格式 | `/template show template_956c81b4 --format=json` |
| `/template create` | 创建新模板 | `--name=<name>` - 模板名称 (必填)<br>`--type=<template_type>` - 模板类型 (必填)<br>`--content=<content>` - 模板内容 (必填)<br>`--desc=<description>` - 模板描述 | `/template create --name="API文档" --type=doc --content="# {{title}}"` |
| `/template update` | 更新现有模板 | `<id>` - 模板ID (必填)<br>`--name=<name>` - 更新名称<br>`--content=<content>` - 更新内容<br>`--desc=<description>` - 更新描述 | `/template update template_956c81b4 --name="更新后的名称"` |
| `/template delete` | 删除模板 | `<id>` - 模板ID (必填)<br>`--force` - 强制删除，无需确认 | `/template delete template_956c81b4 --force` |
| `/template import` | 导入模板文件或目录 | `<file_path>` - 文件或目录路径 (必填)<br>`--overwrite` - 覆盖现有模板<br>`--recursive` - 递归导入目录 | `/template import ./templates/doc --recursive` |
| `/template export` | 导出模板到文件 | `<id>` - 模板ID (必填)<br>`--output=<path>` - 输出路径<br>`--format=<format>` - 导出格式 | `/template export template_956c81b4 --output=./exports/` |
| `/template generate` | 根据模板生成文件 | `<id>` - 模板ID (必填)<br>`<output_file>` - 输出文件路径 (必填)<br>`--vars=<json>` - JSON格式的变量 | `/template generate template_956c81b4 doc.md --vars='{"title":"API文档","version":"1.0"}'` |
| `/template init` | 初始化模板库 | `--force` - 强制初始化，覆盖现有数据<br>`--source=<dir>` - 源模板目录 | `/template init --source=./templates` |

## 生成命令示例

```
/template generate template_956c81b4 command_rule.md --vars '{"name":"测试命令", "description":"这是一个测试命令", "command":"test", "parameters": [{"name":"option", "description":"选项说明", "required":true}]}'
```

## 核心组件

### 模板数据库

- **存储位置**：`/data/vibecopilot.db`
- **表结构**：templates表存储模板基本信息，template_variables表存储变量定义
- **命名规范**：模板ID自动生成，格式为`template_<hash>`
- **作用**：存储和管理模板内容及元数据

### 模板文件

- **文件格式**：支持多种格式包括Markdown（.md），YAML（.yaml），JSON（.json）等
- **元数据格式**：使用Front Matter（YAML头部）定义模板变量和元数据
- **存储位置**：`/templates/`目录及子目录，按类型组织
- **命名规范**：文件名前缀@表示模板文件
- **作用**：为模板系统提供初始模板内容

### 模板类型

VibeCopilot支持以下模板类型：

- **doc**: 文档模板（API文档、教程、用户指南等）
- **rule**: 规则模板（各类规则定义）
- **flow**: 工作流模板（测试流程、开发流程等）
- **roadmap**: 路线图模板（项目计划、进度追踪）
- **command**: 命令模板（命令定义和处理）

## 模板变量定义

模板支持各种变量类型，变量定义使用YAML格式：

```yaml
variables:
  - name: "title"           # 变量名称
    description: "文档标题"  # 变量描述
    required: true          # 是否必填
    type: "string"          # 变量类型
    default: "默认标题"      # 默认值（可选）

  - name: "parameters"
    description: "命令参数列表"
    required: false
    type: "array"
    default: []

  - name: "is_active"
    description: "是否激活"
    required: false
    type: "boolean"
    default: true
```

支持的变量类型：
- **string**: 字符串
- **number**: 数字
- **boolean**: 布尔值
- **array**: 数组
- **object**: 对象

## 模板渲染流程

1. **选择模板**：使用`/template list`查看可用模板，并找到所需模板ID
2. **准备变量**：创建包含所需变量的JSON对象
3. **生成内容**：执行`/template generate`命令，指定模板ID、输出文件和变量
4. **查看结果**：检查生成的文件内容

## 模板语法

模板使用Jinja2语法实现动态内容：

```markdown
# {{ title }}

## 描述
{{ description }}

## 用法
```
/{{ command }} [参数]
```

## 参数
{% for param in parameters %}
- `{{param.name}}`: {{param.description}}{% if param.required %} (必填){% endif %}
{% endfor %}

## 示例
```
{{ example }}
```

{% if notes %}
## 注意事项
{{ notes }}
{% endif %}
```

### 常用语法元素

- **变量输出**: `{{ variable }}`
- **条件语句**: `{% if condition %}...{% else %}...{% endif %}`
- **循环语句**: `{% for item in items %}...{% endfor %}`
- **注释**: `{# 这是注释 #}`
- **过滤器**: `{{ variable | filter }}`

## 与其他系统集成

模板系统与其他VibeCopilot组件集成：

1. **规则系统**：生成规则文件（.mdc）
2. **命令系统**：生成命令处理逻辑
3. **文档系统**：生成各类文档
4. **工作流系统**：生成工作流定义

## 最佳实践

1. 优先使用内置模板
2. 按照模板要求提供完整的变量
3. 对于复杂内容，使用数组和嵌套对象
4. 保持变量命名一致性
5. 使用有意义的描述和注释
6. 生成文件后检查内容正确性
7. 创建新模板时使用标准化的Front Matter格式

## 程序命令参数表
(需要在终端将用户指令转换成vibecopilot可接受的命令形式)

<!-- BEGIN_COMMAND_YAML -->
```yaml
commands:
  template list: # 列出所有模板
    subcommands:
      --type: # 模板类型筛选
        values:
        - rule
        - command
        - doc
        - flow
        - roadmap
        - general
      --verbose: # 显示详细信息
        type: flag
  template show: # 查看模板详情
    subcommands:
      --format: # 输出格式
        values:
        - json
        - text
  template create: # 创建新模板
    subcommands:
      --name: # 模板名称
      --type: # 模板类型
        values:
        - rule
        - command
        - doc
        - flow
        - roadmap
        - general
  template update: # 更新模板
    subcommands:
      --name: # 新的模板名称
  template delete: # 删除模板
    subcommands:
      --force: # 强制删除
        type: flag
  template generate: # 使用模板生成内容
    subcommands:
      --vars: # 变量JSON字符串
  template export: # 导出模板
    subcommands:
      --output: # 输出文件路径
      --format: # 导出格式
        values:
        - json
        - yaml
        - text
  template import-template: # 导入模板
    subcommands:
      --overwrite: # 覆盖已存在的模板
        type: flag
      --recursive: # 递归导入目录下的所有模板
        type: flag
  template init: # 初始化模板库
    subcommands:
      --force: # 强制初始化
        type: flag
      --source: # 指定源目录
```
<!-- END_COMMAND_YAML -->
