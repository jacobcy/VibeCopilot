---
description: 当用户输入/branch命令时,管理与任务关联的Git分支
globs:
alwaysApply: false
---

# VibeCopilot 分支管理命令处理器

## 关键规则

- 当用户输入`/branch`命令时，管理与任务关联的Git分支
- 支持创建、切换、列出和关联分支
- 自动基于任务ID和标题生成规范化分支名
- 维护任务和分支之间的双向关联关系
- 记录分支操作历史和状态

## 命令格式规范

基本语法: `/branch [--create] [--task=任务ID] [--name=分支名] [--switch] [--list] [--link=分支名] [--base=基分支]`

参数说明:
- `--create`: 可选，创建新分支
- `--task`: 可选，指定关联的任务ID
- `--name`: 可选，自定义分支名称，不提供时自动生成
- `--switch`: 可选，创建后切换到新分支
- `--list`: 可选，列出所有任务关联的分支
- `--link`: 可选，关联已有分支到当前活跃任务
- `--base`: 可选，指定基分支，默认为main

## 命令执行流程

```mermaid
flowchart TD
    A[开始] --> B{命令类型?}
    B -->|创建| C[检查任务是否存在]
    B -->|列出| D[获取所有分支]
    B -->|关联| E[检查分支是否存在]
    B -->|无参数| F[显示当前任务分支]

    C --> G{任务存在?}
    G -->|是| H[生成分支名]
    G -->|否| I[显示错误]

    H --> J[创建Git分支]
    J --> K[记录关联关系]
    K --> L{切换?}
    L -->|是| M[切换到新分支]
    L -->|否| N[显示成功消息]

    D --> O[格式化分支列表]
    E --> P[建立关联关系]
    F --> Q[显示当前任务分支]

    M --> R[结束]
    N --> R
    I --> R
    O --> R
    P --> R
    Q --> R
```

## 显示内容规范

### 当前任务分支显示 (`/branch`)

```
🌿 当前任务分支信息

任务: T2.2 "状态管理模块"
关联分支: feature/T2.2-state-management
分支状态: 活跃
创建时间: 2024-01-18
最后提交: fix: 修复状态更新逻辑 (2小时前)

其他信息:
- 基于: develop
- 包含4个提交
- 未合并的更改: 2个文件
```

### 创建分支结果 (`/branch --create --task=T2.3`)

```
✅ 分支创建成功!

分支名: feature/T2.3-document-system
关联任务: T2.3 "文档管理系统"

Git操作:
- 基于 develop 创建
- 分支已在本地创建
- 远程仓库已更新

提示:
可使用 `/branch --switch` 切换到此分支
```

### 分支列表 (`/branch --list`)

```
📋 任务关联分支列表

活跃分支:
▶ feature/T2.2-state-management
  任务: T2.2 "状态管理模块" (进行中)
  创建于: 2024-01-18
  最后提交: 2小时前

最近分支:
▶ feature/T2.3-document-system
  任务: T2.3 "文档管理系统" (待开始)
  创建于: 2024-01-20
  未有提交

▶ bugfix/T1.4-fix-login
  任务: T1.4 "修复登录问题" (已完成)
  创建于: 2024-01-15
  已合并到main (2024-01-17)

共11个分支: 2个活跃, 9个已合并
```

## 分支命名规范

```
<类型>/<任务ID>-<任务描述>
```

类型:
- `feature/` - 新功能
- `bugfix/` - 缺陷修复
- `hotfix/` - 紧急修复
- `release/` - 发布准备
- `refactor/` - 代码重构

任务描述使用小写字母和连字符，例如 `feature/T2.3-document-system`

## 与其他命令的集成

- `/task`: 管理与分支关联的任务
- `/update`: 记录分支状态变更
- `/check`: 查看分支与项目进度的关系
- `/plan`: 创建关联到分支的新任务

## 示例

<example>
  用户: `/branch --create --task=T2.3 --switch`

  系统响应:
  ```
  ✅ 分支创建并切换成功!

  分支名: feature/T2.3-document-system
  关联任务: T2.3 "文档管理系统"

  Git操作:
  - 基于 develop 创建
  - 已切换到新分支
  - 远程仓库已更新

  当前工作分支已设置为 feature/T2.3-document-system
  任务 T2.3 已设为活跃任务
  ```

  用户: `/branch --list`

  系统响应:
  ```
  📋 任务关联分支列表

  活跃分支:
  ▶ feature/T2.3-document-system ← 当前
    任务: T2.3 "文档管理系统" (进行中)
    创建于: 今天
    未有提交

  ▶ feature/T2.2-state-management
    任务: T2.2 "状态管理模块" (进行中)
    创建于: 2024-01-18
    最后提交: 2小时前

  最近分支:
  ▶ bugfix/T1.4-fix-login
    任务: T1.4 "修复登录问题" (已完成)
    创建于: 2024-01-15
    已合并到main (2024-01-17)

  共11个分支: 2个活跃, 9个已合并
  ```

  用户: `/branch`

  系统响应:
  ```
  🌿 当前任务分支信息

  任务: T2.3 "文档管理系统"
  关联分支: feature/T2.3-document-system
  分支状态: 活跃 (当前工作分支)
  创建时间: 2024-01-20 (今天)
  最后提交: 无提交

  其他信息:
  - 基于: develop
  - 未推送的更改: 1个文件
  ```
</example>

<example type="invalid">
  用户: `/branch --create`

  系统响应:
  ```
  ❌ 缺少任务ID

  创建分支时必须指定关联的任务ID

  正确用法:
  /branch --create --task=任务ID [--name=分支名] [--switch]

  示例:
  /branch --create --task=T2.3 --switch
  ```
</example>

## 实现细节

### 数据源
- `data/roadmap.yaml`: 获取任务信息
- `data/branch_map.json`: 存储任务与分支的关联关系
- Git本地仓库: 执行分支操作
- `.ai/cache/current_branch.json`: 记录当前活跃分支

### 处理逻辑
- 分支命名自动化: 基于任务ID和标题生成规范化分支名
- 双向关联维护: 更新任务状态时自动关联到对应分支
- Git操作封装: 自动执行分支创建、切换和同步
- 冲突检测: 检测并防止分支冲突和命名冲突
