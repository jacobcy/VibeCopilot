---
description:当用户输入/check命令时,执行进度检查命令
globs:
alwaysApply: false
---

# VibeCopilot 进度检查命令处理器

## 关键规则

- 当用户输入`/check`命令时，展示项目当前开发进度和状态概览
- 支持检查特定类型或ID的详细进度信息
- 显示进度条、百分比和关键统计数据
- 突出显示关键路径任务和潜在风险
- 提供待完成和已完成任务的统计
- 根据依赖关系提供后续步骤建议

## 命令格式规范

基本语法: `/check [--type=类型] [--id=标识符] [--status=状态] [--update] [--init]`

参数说明:
- `--type`: 可选，检查类型，可选值为`epic`、`story`、`task`
- `--id`: 可选，特定项目标识符，如`epic-001`、`story-002`等
- `--status`: 可选，筛选特定状态，如`pending`、`in-progress`、`completed`
- `--update`: 可选，更新本地路线图文件
- `--init`: 可选，初始化路线图

## 命令执行流程

1. **参数解析**: 解析命令参数并验证
2. **数据加载**: 读取roadmap.yaml文件和GitHub数据(如配置)
3. **数据处理**: 计算项目进度和统计信息
4. **结果格式化**: 根据参数生成输出内容
5. **数据更新**: 如有--update参数，更新本地文件

## 显示内容规范

### 整体进度检查 (`/check`)

显示内容包括整体进度、当前活跃史诗、待完成/已完成任务数量、关键路径任务和后续建议。

```
🔍 项目开发状态检查

当前活跃史诗: Epic-001 "Cursor规则增强系统"
总体进度: ███████░░░ 70%

待完成任务: 3
已完成任务: 7

关键路径任务:
▪ task-005: 实现敏捷故事管理 (进行中，75%)
▪ task-007: 集成Memory系统 (待开始)

下一步建议: 完成task-005后开始task-007
```

### 特定类型检查 (`/check --type=类型`)

根据类型显示相应的项目列表、状态和进度信息。

```
📊 Epic状态检查

Epic列表:
✅ epic-001: 开发命令系统 (已完成)
🚧 epic-002: Cursor规则增强系统 (进行中，70%)
⏱️ epic-003: Memory系统集成 (计划中)

当前活跃Epic: epic-002
包含故事: 3个 (2完成，1进行中)
预计完成时间: 2023-04-30
```

### 特定项目检查 (`/check --id=标识符`)

显示特定项目的详细信息，包括子项目列表、进度和变更历史。

## 状态图

```mermaid
stateDiagram-v2
    [*] --> 参数解析
    参数解析 --> 数据加载
    数据加载 --> 数据处理
    数据处理 --> 结果格式化
    结果格式化 --> [*]

    state 数据处理 {
        [*] --> 计算进度
        计算进度 --> 识别关键路径
        识别关键路径 --> 生成建议
        生成建议 --> [*]
    }

    数据加载 --> 数据更新: 如有--update参数
    数据更新 --> 结果格式化
```

## 示例

<example>
  用户: `/check`

  系统响应:
  ```
  🔍 项目开发状态检查

  当前活跃史诗: Epic-001 "Cursor规则增强系统"
  总体进度: ███████░░░ 70%

  待完成任务: 3
  已完成任务: 7

  关键路径任务:
  ▪ task-005: 实现敏捷故事管理 (进行中，75%)
  ▪ task-007: 集成Memory系统 (待开始)

  下一步建议: 完成task-005后开始task-007
  ```

  用户: `/check --type=story`

  系统响应:
  ```
  📚 用户故事状态检查

  Epic-001 "Cursor规则增强系统" 下的故事:

  ✅ story-001: 实现开发命令系统 (已完成)
  🚧 story-002: 强制开发流程规范 (进行中，60%)
  ⏱️ story-003: 敏捷开发故事板 (待开始)

  活跃故事: story-002
  当前关注任务: task-003、task-004
  ```
</example>

<example type="invalid">
  用户: `/check`

  系统响应:
  ```
  整体进度: 70%
  ```

  问题:
  - 响应过于简单，缺少关键信息
  - 没有提供当前活跃史诗和任务统计
  - 没有提供关键路径任务和建议
</example>

## 实现细节

从roadmap.yaml和GitHub API获取数据，使用进度计算逻辑处理，并格式化输出结果。

依赖模块:
- `src.cli.roadmap`: 路线图文件处理
- `src.cli.github_api`: GitHub项目数据集成
- `src.cli.formatter`: 输出格式化
