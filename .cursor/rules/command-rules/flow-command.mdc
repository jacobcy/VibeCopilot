---
description: 当用户输入/flow命令时，管理和执行VibeCopilot中定义的各种流程
globs:
alwaysApply: false
---

# VibeCopilot 流程执行命令处理器

## 命令目的
`/flow`命令用于管理和执行VibeCopilot中定义的开发流程，提供标准化的流程启动方式和状态管理。

## 规则关系
本命令规则与`flow.mdc`紧密配合：
- `flow.mdc`定义开发流程中的强制检查点和验证标准
- `flow-command.mdc`（本规则）定义流程命令的执行方式和交互逻辑

## 命令格式规范
基本语法: `/flow [流程名称] [参数]`

流程参数:
- `story`: 启动需求确认和PRD生成流程
- `spec`: 启动开发计划制定流程
- `coding`: 启动代码开发流程
- `test`: 启动测试阶段流程
- `review`: 启动审核阶段流程
- `commit`: 启动代码提交流程

参数说明:
- `--id`: 可选，指定相关对象ID
- `--stage`: 可选，直接进入流程的特定阶段
- `--skip-check`: 可选，跳过前置条件检查（谨慎使用）

## 命令执行流程
```mermaid
flowchart TD
    A[开始] --> B{指定了流程名称?}
    B -->|是| C[查找对应流程规则]
    B -->|否| D[显示可用流程列表]
    C --> E{流程规则存在?}
    E -->|是| F[检查前置条件]
    E -->|否| G[提示流程不存在]
    F --> H{满足前置条件?}
    H -->|是| I[启动流程]
    H -->|否| J[提示条件不满足]
```

## 流程启动处理规范

### 显示可用流程 (`/flow`)
显示系统中所有可用的流程及其简要说明:
```
🔄 可用流程列表
1. story - 需求确认与PRD产出流程
2. spec - 开发计划制定流程
3. coding - 代码开发流程
4. test - 测试阶段流程
5. review - 审核阶段流程
6. commit - 代码提交流程
```

### 启动特定流程 (`/flow <流程名称>`)
启动指定的流程并执行其定义的步骤:
```
🚀 启动 [流程名称] 流程
流程ID: F001
名称: 需求确认与PRD产出
对应规则: story-flow.mdc
当前阶段: 1/3 (确认需求范围和优先级)
```

## 流程管理功能

### 流程状态查看
显示当前正在执行的流程状态:
```
📊 当前流程状态
流程ID: F001
名称: 需求确认与PRD产出
当前阶段: 2/3 (编写PRD文档)
完成度: 33%
```

### 流程中断与恢复
支持中断和恢复流程执行:
```
⏸️ 流程已暂停
流程ID: F001
名称: 需求确认与PRD产出
当前状态: 已暂停
使用 `/flow resume F001` 恢复流程
```

## 命令注释用法
使用`{/flow}`格式表示提及命令而非执行：
```
讨论流程命令时，使用{/flow}表示提及命令而非执行，例如：
"关于{/flow}命令，它用于启动和管理开发流程"
```

## 与其他命令的集成
- `/story`: 用于执行故事相关操作
- `/task`: 管理流程中的具体任务
- `/check`: 检查流程前置条件
- `/plan`: 在spec流程中使用
- `/update`: 更新流程执行状态

## 示例

<example>
  用户: `/flow`

  系统响应:
  ```
  🔄 可用流程列表

  1. story - 需求确认与PRD产出流程
     命令: /flow story [故事名称]

  2. spec - 开发计划制定流程
     命令: /flow spec --id=<故事ID>

  3. coding - 代码开发流程
     命令: /flow coding --id=<任务ID>

  使用 `/flow <流程名称>` 启动特定流程。
  ```

  用户: `/flow story 用户认证功能`

  系统响应:
  ```
  🚀 启动 故事流程

  流程ID: F001
  名称: 需求确认与PRD产出
  对应规则: story-flow.mdc

  已创建新故事:
  - ID: S4.1
  - 标题: 用户认证功能
  - 状态: Draft

  当前阶段: 1/3 (确认需求范围和优先级)
  ```
</example>

<example type="invalid">
  用户: `/flow unknown`

  系统响应:
  ```
  ❌ 未知流程
  找不到名为 "unknown" 的流程。
  可用的流程有: story, spec, coding, test, review, commit
  ```
</example>

## 实现细节

### 流程规则映射
- 维护流程名称与规则文件的映射关系
- 自动加载flow-rules目录下的规则文件
- 提取每个规则的描述和执行条件

### 流程状态管理
- 在 `.ai/flows/` 目录下存储流程执行状态
- 记录当前阶段、完成度和暂停/恢复信息
- 支持流程的中断和恢复
