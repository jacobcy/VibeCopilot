---
description: 当用户输入/task或//task命令时,管理项目任务
globs:
alwaysApply: false
id: task-command
title: "VibeCopilot任务命令规则"
type: command_rule
status: active
version: "1.0"
tags: [command, task, management, rule]
related_items: [command-system]
---

# VibeCopilot任务命令规则

## 任务命令概述

任务命令(`/task`和`//task`)用于管理VibeCopilot中的任务，包括创建、更新、跟踪和关联任务。任务是项目管理的基本单位，类似于GitHub issue系统。

## 命令类型和执行方式

### 规则命令形式

- 命令格式：`/task [subcommand] [args]`
- 执行方式：由Cursor Agent直接解释执行
- 适用场景：简单任务查询、创建和状态更新

### 程序命令形式

- 命令格式：`//task [subcommand] [args]`
- 执行方式：转换为`vibecopilot task [subcommand] [args]`并通过终端执行
- 适用场景：复杂任务管理、批量操作和任务关联

## 子命令详解

| 子命令 | 说明 | 示例 |
|-------|------|------|
| `list` | 列出所有任务 | `/task list [--status=<status>]` |
| `show` | 查看任务详情 | `/task show <id>` |
| `create` | 创建新任务 | `/task create --title="<title>"` |
| `update` | 更新任务 | `/task update <id> [--status=<status>]` |
| `delete` | 删除任务 | `//task delete <id> [--force]` |
| `link` | 关联任务到其他实体 | `//task link <id> --target=<target_id>` |
| `comment` | 添加任务评论 | `/task comment <id> --content="<content>"` |

## 任务状态定义

任务可以具有以下状态：

| 状态 | 说明 | 颜色代码 |
|-----|------|---------|
| `todo` | 待办，尚未开始 | 灰色 |
| `in_progress` | 进行中，正在被处理 | 蓝色 |
| `review` | 审核中，等待验证 | 黄色 |
| `blocked` | 被阻塞，无法继续进行 | 红色 |
| `completed` | 已完成，所有工作都已结束 | 绿色 |
| `cancelled` | 已取消，不再需要完成 | 紫色 |

## 任务类型定义

VibeCopilot支持多种任务类型：

| 类型 | 说明 | 前缀 |
|-----|------|------|
| `feature` | 功能开发任务 | FEA |
| `bug` | 缺陷修复任务 | BUG |
| `doc` | 文档编写任务 | DOC |
| `test` | 测试相关任务 | TST |
| `refactor` | 代码重构任务 | REF |
| `research` | 研究和调研任务 | RES |
| `design` | 设计相关任务 | DSG |

## 任务关联关系

任务可以与其他实体建立关联关系：

| 关系类型 | 说明 | 示例 |
|---------|------|------|
| `parent` | 父任务关系 | `//task link 102 --target=101 --type=parent` |
| `depends_on` | 依赖关系 | `//task link 102 --target=103 --type=depends_on` |
| `blocks` | 阻塞关系 | `//task link 102 --target=104 --type=blocks` |
| `related` | 相关关系 | `//task link 102 --target=105 --type=related` |
| `story` | 所属故事 | `//task link 102 --target=S101 --type=story` |
| `commit` | 关联提交 | `//task link 102 --target=commit:abc123 --type=commit` |

## 任务标签和分类

任务可以附加标签进行分类和筛选：

```
/task create --title="修复登录问题" --tags="frontend,security,urgent"
/task list --tags="urgent"
```

## 批量任务操作

可以使用批量操作处理多个任务：

```
//task update --query="status:blocked" --set-status=in_progress
//task delete --query="status:cancelled" --older-than=30d --force
```

## 任务模板

VibeCopilot提供预定义任务模板，简化创建过程：

```
/task create --template=bug --title="登录页面崩溃"
/task create --template=feature --title="添加支付功能"
```

## 使用示例

```
# 列出所有进行中的任务
/task list --status=in_progress

# 创建新功能任务
/task create --title="实现用户注册功能" --type=feature --priority=high

# 更新任务状态
/task update 123 --status=in_progress --assignee=john

# 查看任务详情
/task show 123

# 添加任务评论
/task comment 123 --content="已完成初步设计"

# 关联任务到故事
//task link 123 --target=S45 --type=story

# 标记任务为阻塞状态
/task update 123 --status=blocked --reason="等待API完成"
```

## 与其他系统集成

- **流程集成**：任务可触发或关联到工作流
- **路线图集成**：任务可关联到路线图项
- **状态集成**：任务状态变更会反映在项目状态中
- **Git集成**：任务可关联到分支和提交

## 程序命令参数表
(需要在终端将用户指令转换成vibecopilot可接受的命令形式)

<!-- BEGIN_COMMAND_YAML -->
```yaml
commands:
  task list:
    subcommands:
      --status: {}
      --assignee: {}
      --label: {}
      --roadmap: {}
      --independent: {}
      --limit: {}
      --offset: {}
      --verbose: {}
      --format:
        values:
        - yaml
        - json
  task show:
    subcommands:
      --verbose: {}
      --format:
        values:
        - yaml
        - json
  task create:
    subcommands:
      --description: {}
      --priority:
        values:
        - low
        - medium
        - high
      --status:
        values:
        - todo
        - in_progress
        - done
      --link-story: {}
      --link-github: {}
      --flow:
        values:
        - dev
        - review
        - deploy
      --verbose: {}
  task update:
    subcommands:
      --title: {}
      --description: {}
      --status: {}
      --assignee: {}
      --label: {}
      --add-label: {}
      --remove-label: {}
      --link-story: {}
      --link-github: {}
      --unlink:
        values:
        - story
        - github
  task delete:
    subcommands:
      --force: {}
  task comment:
    subcommands:
      --comment: {}
  task link:
    subcommands:
      --flow:
        values:
        - dev
        - review
        - deploy
      --session: {}

```
<!-- END_COMMAND_YAML -->
