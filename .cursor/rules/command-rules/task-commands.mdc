---
description: 当用户输入/task或//task命令时,管理项目任务
globs:
alwaysApply: false
id: task-command
title: "VibeCopilot任务命令规则"
type: command_rule
status: active
version: "1.0"
tags: [command, task, management, rule]
related_items: [command-system]
---

# VibeCopilot任务命令规则

## 任务命令概述

任务命令(`/task`和`//task`)用于管理VibeCopilot中的任务，包括创建、更新、跟踪和关联任务。任务是项目管理的基本单位，类似于GitHub issue系统。

## 命令类型和执行方式

### 规则命令形式

- 命令格式：`/task [subcommand] [args]`
- 执行方式：由Cursor Agent直接解释执行
- 适用场景：简单任务查询、创建和状态更新

### 程序命令形式

- 命令格式：`//task [subcommand] [args]`
- 执行方式：转换为`vibecopilot task [subcommand] [args]`并通过终端执行
- 适用场景：复杂任务管理、批量操作和任务关联

## 任务状态定义

任务可以具有以下状态：

| 状态 | 说明 | 颜色代码 |
|-----|------|---------|
| `todo` | 待办，尚未开始 | 灰色 |
| `in_progress` | 进行中，正在被处理 | 蓝色 |
| `review` | 审核中，等待验证 | 黄色 |
| `blocked` | 被阻塞，无法继续进行 | 红色 |
| `completed` | 已完成，所有工作都已结束 | 绿色 |
| `cancelled` | 已取消，不再需要完成 | 紫色 |

## 任务类型定义

VibeCopilot支持多种任务类型：

| 类型 | 说明 | 前缀 |
|-----|------|------|
| `feature` | 功能开发任务 | FEA |
| `bug` | 缺陷修复任务 | BUG |
| `doc` | 文档编写任务 | DOC |
| `test` | 测试相关任务 | TST |
| `refactor` | 代码重构任务 | REF |
| `research` | 研究和调研任务 | RES |
| `design` | 设计相关任务 | DSG |

## 任务标签和分类

任务可以附加标签进行分类和筛选：

```
/task create --title="修复登录问题" --labels="frontend,security,urgent"
/task list --labels="urgent"
```

## 与其他系统集成

- **流程集成**：任务可触发或关联到工作流
- **路线图集成**：任务可关联到路线图项
- **状态集成**：任务状态变更会反映在项目状态中
- **Git集成**：任务可关联到分支和提交

## 程序命令参数表
(需要在终端将用户指令转换成vibecopilot可接受的命令形式)

<!-- BEGIN_COMMAND_YAML -->
```yaml
commands:
  task list: # 列出项目中的任务
    options:
      --status: # 按状态过滤
      --assignee: # 按负责人过滤
      --label: # 按标签过滤
      --roadmap: # 按关联的 Story ID 过滤
      --independent: # 仅显示独立任务
      --limit: # 限制返回数量
      --offset: # 跳过指定数量的结果
      --verbose: # 显示更详细的信息
      --format: # 输出格式
  task show: # 显示任务详情
    arguments:
      task_id: # 任务ID
    options:
      --verbose: # 显示更详细的信息
      --format: # 输出格式
      --log: # (假设) 显示相关日志
      --ref: # (假设) 显示引用信息
      --comments: # (假设) 显示评论
  task create: # 创建新任务
    arguments:
      title: # 任务标题
    options:
      --desc: # 任务描述
      --priority: # 任务优先级
      --status: # 任务状态
      --due: # 任务截止日期 (格式: YYYY-MM-DD，默认为创建日期后3天)
      --link-story: # 关联到Story
      --link-github: # 关联到GitHub Issue (格式: owner/repo#number)
      --flow: # 创建并关联工作流会话
      --verbose: # 显示详细信息
  task update: # 更新任务信息
    arguments:
      task_id: # 任务ID
    options:
      --title: # 新的任务标题
      --desc: # 新的任务描述
      --status: # 新的状态
      --assignee: # 新的负责人
      --labels: # 设置新的标签列表
      --due: # 任务截止日期 (格式: YYYY-MM-DD，设置为'clear'可清除截止日期)
      --link-story: # 关联到Story
      --link-github: # 关联到GitHub Issue (格式: owner/repo#number)
      --unlink: # 取消关联
  task delete: # 删除指定的任务
    arguments:
      task_id: # 任务ID
    options:
      --force: # 强制删除
  task comment: # 添加任务评论
    arguments:
      task_id: # 任务ID
    options:
      --comment: # 评论内容
  task link: # 管理任务的工作流会话
    arguments:
      task_id: # 任务ID，不指定则使用当前任务
    options:
      --flow: # 创建新的工作流会话
      --session: # 关联到已存在的会话
```
<!-- END_COMMAND_YAML -->
