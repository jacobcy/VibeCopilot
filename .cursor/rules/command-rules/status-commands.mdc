---
description: 当用户输入/status或//status命令时,获得项目状态支持
globs:
alwaysApply: false
id: status-command
title: "VibeCopilot状态命令规则"
type: command_rule
status: active
version: "1.0"
tags: [command, status, project, rule]
related_items: [command-system]
---

# VibeCopilot状态命令规则

## 状态命令概述

状态命令(`/status`和`//status`)用于查看和管理VibeCopilot项目的各种状态信息，包括项目整体状态、工作流状态、任务状态和路线图进度。它是项目状态的统一视图入口。

## 命令类型和执行方式

### 规则命令形式

- 命令格式：`/status [subcommand] [args]`
- 执行方式：由Cursor Agent直接解释执行
- 适用场景：简单状态查询和概览

### 程序命令形式

- 命令格式：`//status [subcommand] [args]`
- 执行方式：转换为`vibecopilot status [subcommand] [args]`并通过终端执行
- 适用场景：详细状态报告、状态更新和多维度分析

## 子命令详解

| 子命令 | 说明 | 示例 |
|-------|------|------|
| `show` | 显示项目状态概览 | `/status show [--type=<status_type>]` |
| `flow` | 显示流程状态 | `/status flow [--verbose]` |
| `roadmap` | 显示路线图状态 | `/status roadmap [--verbose]` |
| `task` | 显示任务状态 | `/status task [--verbose]` |
| `update` | 更新项目阶段 | `//status update --phase=<phase>` |
| `init` | 初始化项目状态 | `//status init [--name=<project_name>]` |
| `report` | 生成状态报告 | `//status report [--format=<format>]` |
| `history` | 查看状态历史 | `/status history [--days=<days>]` |

## 项目阶段定义

VibeCopilot定义了以下项目阶段：

| 阶段 | 描述 | 阶段代码 |
|-----|------|---------|
| `planning` | 规划阶段，需求分析和范围定义 | P |
| `design` | 设计阶段，架构和界面设计 | D |
| `development` | 开发阶段，功能实现 | DEV |
| `testing` | 测试阶段，质量验证 | TST |
| `release` | 发布阶段，部署和发布 | REL |
| `maintenance` | 维护阶段，优化和修复 | MNT |

## 状态视图类型

状态命令支持多种视图类型：

| 视图类型 | 说明 | 获取方式 |
|---------|------|---------|
| `summary` | 简要概览，包含关键指标 | `/status show --type=summary` |
| `detailed` | 详细视图，包含所有状态 | `/status show --type=detailed` |
| `progress` | 进度视图，以进度百分比显示 | `/status show --type=progress` |
| `timeline` | 时间线视图，展示历史和预期 | `/status show --type=timeline` |
| `dashboard` | 仪表盘视图，图形化展示状态 | `/status show --type=dashboard` |

## 状态报告生成

可以生成各种格式的状态报告：

```
//status report --format=markdown --output=./reports/status_report.md
//status report --format=html --output=./reports/status_report.html
//status report --format=json --output=./api/status.json
```

## 状态指标定义

VibeCopilot跟踪以下状态指标：

| 指标 | 说明 | 查看方式 |
|-----|------|---------|
| `task_completion` | 任务完成率 | `/status metrics --name=task_completion` |
| `milestone_progress` | 里程碑进度 | `/status metrics --name=milestone_progress` |
| `code_quality` | 代码质量指标 | `/status metrics --name=code_quality` |
| `test_coverage` | 测试覆盖率 | `/status metrics --name=test_coverage` |
| `documentation` | 文档完整性 | `/status metrics --name=documentation` |

## 状态通知系统

可配置状态变更通知：

```
//status notify --event=phase_change --channel=slack
//status notify --event=low_task_completion --threshold=70
```

## 使用示例

```
# 显示项目总体状态
/status show

# 查看当前工作流状态
/status flow

# 显示任务完成情况
/status task --view=completion

# 更新项目阶段
//status update --phase=development

# 初始化新项目状态
//status init --name="支付功能开发"

# 检查特定指标
/status metrics --name=test_coverage

# 生成状态报告
//status report --format=markdown --period=weekly

# 查看状态历史
/status history --days=30
```

## 状态集成

状态系统与其他系统的集成：

- **流程集成**：工作流状态反映在项目状态中
- **任务集成**：任务完成情况影响总体进度
- **路线图集成**：路线图里程碑与项目阶段关联
- **Git集成**：代码提交活动影响开发状态
- **CI/CD集成**：构建和部署状态显示在状态报告中

## 状态可视化

状态可使用多种可视化方式：

1. **进度条**：显示完成百分比
2. **状态指示灯**：绿色(正常)、黄色(警告)、红色(问题)
3. **甘特图**：显示时间线和依赖关系
4. **燃尽图**：显示任务完成趋势
5. **仪表盘**：汇总多个状态指标

## 程序命令参数表
(需要在终端将用户指令转换成vibecopilot可接受的命令形式)

<!-- BEGIN_COMMAND_YAML -->
```yaml
commands:
  status:
    subcommands:
      show: {}
      flow: {}
      roadmap: {}
      task: {}
      update: {}
      init: {}

```
<!-- END_COMMAND_YAML -->
