---
description: 当用户输入/task命令时,管理项目任务
globs:
alwaysApply: false
---

# VibeCopilot 任务管理命令处理器

## 关键规则

- 当用户输入`/task`命令时，查看和管理当前任务
- 支持设置特定任务为当前活跃任务
- 支持更新任务状态、优先级和负责人
- 支持查看任务列表和详情
- 提供任务间的依赖关系可视化

## 命令格式规范

基本语法: `/task [--id=任务ID] [--status=状态] [--assignee=负责人] [--list] [--priority=优先级] [--detail]`

参数说明:
- `--id`: 可选，指定任务ID，若提供则设为当前任务
- `--status`: 可选，更新任务状态(todo/in_progress/completed/blocked)
- `--assignee`: 可选，设置任务负责人
- `--list`: 可选，列出所有未完成任务
- `--priority`: 可选，设置任务优先级(P0/P1/P2/P3)
- `--detail`: 可选，显示详细任务信息

## 命令执行流程

```mermaid
flowchart TD
    A[开始] --> B{提供了任务ID?}
    B -->|是| C[查找任务]
    B -->|否| D{使用了--list?}
    D -->|是| E[列出任务]
    D -->|否| F[显示当前活跃任务]
    C --> G{提供了状态/优先级/负责人?}
    G -->|是| H[更新任务属性]
    G -->|否| I{使用了--detail?}
    I -->|是| J[显示详细信息]
    I -->|否| K[显示基本信息]
    H --> L[更新roadmap.yaml]
    E --> N[结束]
    F --> N
    J --> N
    K --> N
    L --> M[GitHub同步]
    M --> N
```

## 显示内容规范

### 当前任务显示 (`/task`)

显示当前活跃任务的基本信息、所属里程碑、状态、负责人和相关依赖任务。

```
📝 当前活跃任务:

任务ID: T2.2
标题: 状态管理模块
状态: 进行中
优先级: P0
负责人: 张三
所属里程碑: M2 "核心功能开发阶段"

描述:
实现应用状态管理核心模块，包括状态存储、更新和订阅机制

相关任务:
- 前置依赖: T2.1 "核心引擎实现" (已完成)
- 后置任务: T2.4 "AI集成基础功能" (待开始)

预计完成时间: 2024-01-25 (还剩8天)
```

### 任务列表显示 (`/task --list`)

按状态分组显示任务列表，包括ID、标题、优先级和负责人。

```
📋 任务列表:

【进行中】
▶ T2.2 "状态管理模块" (P0, 张三)

【待开始】
▶ T2.3 "文档管理系统" (P1, 未分配)
▶ T2.4 "AI集成基础功能" (P1, 李四)
▶ T3.1 "高级特性实现" (P2, 未分配)

【阻塞中】
⚠ T3.2 "插件系统开发" (P1, 王五) - 等待依赖任务T2.4完成

共8个任务: 1个进行中, 3个待开始, 1个阻塞, 3个已完成
```

### 任务更新反馈

显示任务更新结果，包括状态变更前后对比和GitHub同步状态。

```
✅ 任务已更新!

任务ID: T2.3
标题: 文档管理系统
状态: 进行中 (之前: 待开始)
负责人: 王五 (之前: 未分配)
优先级: P1
所属里程碑: M2 "核心功能开发阶段"

此任务现在设为当前活跃任务
路线图文件已更新: data/roadmap.yaml
GitHub同步已完成: Issue #15 已更新
```

## 状态转换图

```mermaid
stateDiagram-v2
    [*] --> todo
    todo --> in_progress
    in_progress --> completed
    in_progress --> blocked
    blocked --> in_progress
    completed --> [*]
```

## 与其他命令的集成

- `/story`: 显示包含哪些任务
- `/update`: 记录变更原因和细节
- `/check`: 提供整体项目状态
- `/plan`: 创建新任务

## 示例

<example>
  用户: `/task`

  系统响应:
  ```
  📝 当前活跃任务:

  任务ID: T2.2
  标题: 状态管理模块
  状态: 进行中
  优先级: P0
  负责人: 张三
  所属里程碑: M2 "核心功能开发阶段"

  描述:
  实现应用状态管理核心模块，包括状态存储、更新和订阅机制

  相关任务:
  - 前置依赖: T2.1 "核心引擎实现" (已完成)
  - 后置任务: T2.4 "AI集成基础功能" (待开始)

  预计完成时间: 2024-01-25 (还剩8天)
  ```

  用户: `/task --list`

  系统响应:
  ```
  📋 任务列表:

  【进行中】
  ▶ T2.2 "状态管理模块" (P0, 张三)

  【待开始】
  ▶ T2.3 "文档管理系统" (P1, 未分配)
  ▶ T2.4 "AI集成基础功能" (P1, 李四)
  ▶ T3.1 "高级特性实现" (P2, 未分配)

  【阻塞中】
  ⚠ T3.2 "插件系统开发" (P1, 王五) - 等待依赖任务T2.4完成

  共8个任务: 1个进行中, 3个待开始, 1个阻塞, 3个已完成
  ```

  用户: `/task --id=T2.3 --status=in_progress --assignee=王五`

  系统响应:
  ```
  ✅ 任务已更新!

  任务ID: T2.3
  标题: 文档管理系统
  状态: 进行中 (之前: 待开始)
  负责人: 王五 (之前: 未分配)
  优先级: P1
  所属里程碑: M2 "核心功能开发阶段"

  此任务现在设为当前活跃任务
  路线图文件已更新: data/roadmap.yaml
  GitHub同步已完成: Issue #15 已更新
  ```
</example>

<example type="invalid">
  用户: `/task --id=T2.3 --status=in_progress`

  系统响应:
  ```
  已更新
  ```

  问题:
  - 反馈过于简单，缺少关键信息
  - 没有显示任务的标题和详情
  - 没有确认是否设为当前活跃任务
</example>

## 实现细节

### 数据源

- `data/roadmap.yaml`: 主要数据源，包含任务详细信息
- GitHub API: 同步任务状态
- `.ai/cache/current_task.json`: 存储当前活跃任务

### 处理逻辑

任务查找和更新操作使用`src.cli.task_manager`模块实现，包括状态验证、依赖检查和更新记录等功能。GitHub同步通过`src.cli.github_api`模块完成。
