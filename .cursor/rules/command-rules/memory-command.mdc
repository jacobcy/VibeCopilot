---
description: VibeCopilot的Memory命令，用于管理知识库，支持内容存储、检索和关联
globs:
alwaysApply: false
---

# VibeCopilot 知识库管理命令处理器

## 关键规则

- 当用户输入`/memory`命令时，管理基于Basic Memory的知识库系统
- 使用MCP工具保存对话内容和即时笔记
- 使用本地脚本处理文档导入和Obsidian同步
- 支持文档处理、实体提取、关系识别和向量搜索
- 使用Basic Memory数据模型存储实体、关系和观察记录

## 命令格式规范

基本语法: `/memory <操作> [参数]`

### MCP工具操作

- `write`: 保存对话内容到知识库
  - `--title`: 文档标题(必填)
  - `--folder`: 存储目录(必填)
  - `--tags`: 标签列表，逗号分隔(可选)

- `read`: 读取知识库内容
  - `--path`: 文档路径或标识符(必填)

- `search`: 语义搜索知识库
  - `--query`: 搜索关键词(必填)
  - `--type`: 内容类型(可选)

### 本地脚本操作

- `import`: 导入本地文档到知识库
  - 使用脚本: `scripts/basic_memory/import_docs.py`
  - 参数: `<source_dir>` 源文档目录

- `export`: 导出知识库到Obsidian
  - 使用脚本: `scripts/basic_memory/export_to_obsidian.py`
  - 参数:
    - `--db`: 数据库路径
    - `--output`: Obsidian输出目录

- `sync`: 同步Obsidian和标准文档
  - 使用脚本: `scripts/docs/obsidian/sync.py`
  - 子命令:
    - `to-obsidian`: 同步到Obsidian
    - `to-docs`: 同步回标准文档
    - `watch`: 监控变化自动同步

## 命令执行流程

```mermaid
flowchart TD
    A[开始] --> B{操作类型}

    B -->|MCP工具| C[对话内容处理]
    C --> C1[write]
    C --> C2[read]
    C --> C3[search]

    B -->|本地脚本| D[文档处理]
    D --> D1[import]
    D --> D2[export]
    D --> D3[sync]

    C1 --> C1A[调用write_note]
    C2 --> C2A[调用read_note]
    C3 --> C3A[调用search_notes]

    D1 --> D1A[运行import_docs.py]
    D2 --> D2A[运行export_to_obsidian.py]
    D3 --> D3A[运行sync.py]

    C1A --> E[结果显示]
    C2A --> E
    C3A --> E
    D1A --> E
    D2A --> E
    D3A --> E
```

## 配置路径说明

```yaml
# Basic Memory数据库
db_path: /Users/chenyi/basic-memory/main.db

# Obsidian知识库
vault_path: /Users/chenyi/basic-memory/vault

# 标准文档目录
docs_path: /Users/chenyi/Public/VibeCopilot/docs
```

## 使用示例

### 保存对话内容 (`/memory write`)

```
用户: /memory write --title="Git分支管理优化" --folder="development/git" --tags=git,optimization

AI: 📝 保存对话内容...
✅ 内容已保存到: development/git/Git分支管理优化.md
```

### 导入本地文档 (`/memory import`)

```
用户: /memory import ./docs/dev

AI: 📚 开始导入文档...
- 扫描目录: ./docs/dev
- 发现32个Markdown文件
- 处理中...
✅ 导入完成！新增: 28个实体, 45个关系
```

### 导出到Obsidian (`/memory export`)

```
用户: /memory export

AI: 📤 导出知识库到Obsidian...
- 导出文档: 156个
- 导出概念: 87个
- 导出标签: 32个
✅ 导出完成！数据已保存到Obsidian知识库
```

### 同步文档 (`/memory sync`)

```
用户: /memory sync to-obsidian

AI: 🔄 同步标准文档到Obsidian...
- 扫描文件变更...
- 同步32个文件
✅ 同步完成！
```

## 错误处理

1. 配置错误
```
❌ 错误: 找不到配置文件
👉 请检查 config.yaml 中的路径配置
```

2. 权限错误
```
❌ 错误: 无法访问数据库
👉 请检查文件权限和路径
```

3. 同步冲突
```
⚠️ 警告: 发现文件冲突
- conflict.md 在两边都有修改
👉 请手动解决冲突后重试
```

## 与其他命令的集成

- `/task`: 关联知识库内容到开发任务
- `/branch`: 分支可关联到相关知识文档
- `/check`: 可以查看知识库统计作为项目状态的一部分

## 实现说明

1. MCP工具调用
```python
# 保存内容
mcp_basic_memory_write_note(
    title="文档标题",
    content="内容",
    folder="目标目录",
    tags="标签1,标签2"
)

# 读取内容
mcp_basic_memory_read_note(
    identifier="文档路径"
)
```

2. 本地脚本调用
```python
# 导入文档
subprocess.run([
    "python",
    "scripts/basic_memory/import_docs.py",
    source_dir
])

# 导出到Obsidian
subprocess.run([
    "python",
    "scripts/basic_memory/export_to_obsidian.py",
    "--db", db_path,
    "--output", output_dir
])
```
