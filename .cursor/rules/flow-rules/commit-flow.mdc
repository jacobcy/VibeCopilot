---
description: 本规则定义了VibeCopilot项目的代码提交标准和流程。应在以下情况下应用：(1)代码审核通过后准备提交时，(2)将功能合并到主分支时，(3)执行版本发布时，(4)管理多分支代码库时，(5)撰写提交信息时。规则确保代码提交的规范性、可追踪性和版本管理的严谨性，是开发流程的最终环节。
globs: ["*.git", "CHANGELOG.md"]
alwaysApply: false
---

# VibeCopilot 代码提交标准

## 规则关系
本规则与以下规则紧密配合：
- `flow.mdc`: 遵循流程检查点要求，确保提交前通过强制流程检查
- `branch-cmd.mdc`: 与分支管理集成，确保提交在正确的分支上进行
- `git-commit-push-agent.mdc`: 提供具体的Git提交命令格式规范

## 流程定位
本规则位于VibeCopilot核心开发流程的最终阶段：
1. PRE-FLOW阶段由story-flow确认需求并产出PRD
2. 由spec-flow针对PRD制定开发计划并获得批准
3. 由coding-flow执行代码编写
4. 由test-flow进行测试验证
5. 由review-flow进行提交前审核
6. →→ **当前阶段：commit-flow完成代码提交** ←←

## 分支与提交集成流程

### 1. 任务分支创建
- 使用`/branch --create --task=<ID>`创建功能分支
- 系统自动检查流程前置条件
- 分支命名遵循`<类型>/<任务ID>-<描述>`格式

### 2. 开发与提交
- 在任务分支上进行开发
- 提交遵循Conventional Commits规范
- 使用`/check commit`验证提交内容合规性

### 3. 审核与合并
- 完成开发后创建合并请求
- 通过代码审核后合并到目标分支
- 分支合并后自动关联任务状态

## 提交信息规范

### 格式标准
- 标题格式：`<type>[scope]: <description>`
- 类型(type)：feat, fix, docs, style, refactor, perf, test, chore
- 简洁描述：50个字符以内
- 正文可选，需空行分隔标题

### 关联标识
- 必须包含任务ID：`[T2.3]`
- 可选添加相关PRD/文档链接

## 分支合并策略

- 功能完成→合并到开发分支→关闭任务
- 使用非快进方式(--no-ff)保留历史
- 合并前先与目标分支同步
- 解决冲突时保证功能完整性

## 提交前检查清单

- [x] 所有测试通过
- [x] 代码符合规范标准
- [x] 无临时代码或调试信息
- [x] 更新CHANGELOG.md
- [x] 相关文档已更新

## 命令使用指南

```
# 创建功能分支
/branch --create --task=T2.3 --switch

# 检查提交前置条件
/check commit

# 提交代码
/commit "feat: 实现文档管理API" --task=T2.3

# 完成并请求合并
/branch merge --target=develop
```

## 示例

<example>
  # 规范工作流示例

  ## 分支创建与开发

  ```bash
  # 创建功能分支
  /branch --create --task=T2.3 --switch

  # 开发完成后提交
  /commit "feat(docs): 实现文档管理API" --task=T2.3
  ```

  ## 提交信息示例

  ```
  feat(auth): 添加JWT认证中间件 [T2.1]

  实现基于JWT的用户认证机制，包括：
  - 令牌生成和解析
  - 认证中间件
  - 集成用户服务

  PRD: docs/prd/authentication.md
  ```

  ## 合并流程示例

  ```bash
  # 发起合并请求
  /branch merge --task=T2.3 --target=develop

  # 系统执行:
  # 1. 检查测试通过状态
  # 2. 验证代码审核状态
  # 3. 执行合并操作
  # 4. 更新任务状态为"已完成"
  ```
</example>

<example type="invalid">
  # 不规范实践示例

  ## 跳过流程检查

  ```bash
  # 直接在主分支开发
  git checkout main
  # 修改代码...
  git add .
  git commit -m "添加登录功能"
  git push
  ```

  ## 不关联任务的提交

  ```
  修复了几个bug
  ```
</example>
