---
description: 本规则定义了VibeCopilot项目的代码提交标准和流程。应在以下情况下应用：(1)代码审核通过后准备提交时，(2)将功能合并到主分支时，(3)执行版本发布时，(4)管理多分支代码库时，(5)撰写提交信息时。规则确保代码提交的规范性、可追踪性和版本管理的严谨性，是开发流程的最终环节。
globs: ["*.git", "CHANGELOG.md"]
alwaysApply: false
---

# VibeCopilot 代码提交标准

## 流程定位

本规则位于VibeCopilot核心开发流程的最终阶段：
1. PRE-FLOW阶段由story-flow确认需求并产出PRD
2. 由spec-flow针对PRD制定开发计划并获得批准
3. 由coding-flow执行代码编写
4. 由test-flow进行测试验证
5. 由review-flow进行提交前审核
6. →→ **当前阶段：commit-flow完成代码提交** ←←

## 前置条件

- **必须通过review-flow的审核**（审核结果为"通过"或"有条件通过"）
- **所有高优先级问题必须已修复**
- **所有测试必须通过**
- **所有必要文档必须完成**
- **代码必须满足项目质量标准**

## 提交内容与规范

### 提交信息格式
- 遵循Conventional Commits规范：`<type>[optional scope]: <description>`
- 常用类型(type)：
  - `feat`: 新功能
  - `fix`: 修复bug
  - `docs`: 文档更新
  - `style`: 代码风格调整（不影响代码运行）
  - `refactor`: 代码重构（不新增功能也不修复bug）
  - `perf`: 性能优化
  - `test`: 添加或修改测试
  - `chore`: 构建过程或辅助工具变动
- 描述(description)应简洁明了，50个字符以内
- 正文和脚注可选，需要空一行与标题分隔

### 分支管理
- 功能开发使用feature分支：`feature/<功能名称>`
- 缺陷修复使用bugfix分支：`bugfix/<问题描述>`
- 实验性功能使用experiment分支：`experiment/<功能名称>`
- 发布准备使用release分支：`release/v<版本号>`
- 紧急生产修复使用hotfix分支：`hotfix/v<版本号>`

### 合并策略
- 功能分支必须通过PR/MR流程合并回开发分支
- 合并必须使用非快进方式(no-fast-forward)保留历史
- 合并前必须先与目标分支同步以解决冲突
- 解决冲突时必须保证功能完整性和测试通过

## 提交前准备

### 最终检查
- 再次确认所有测试通过
- 确认代码格式符合项目规范
- 确认没有遗留的临时代码或注释
- 确认没有敏感信息或秘钥被提交
- 确认所有文件权限正确

### 变更记录
- 更新CHANGELOG.md文件
- 记录所有新功能、修复和变更
- 相关issue和PR/MR的引用
- 标注不兼容的变更和迁移说明
- 记录贡献者信息

## 提交流程

### 1. 代码准备
- 确保工作目录干净（无未跟踪或修改文件）
- 确保分支最新（与远程同步）
- 最后一次运行测试套件

### 2. 提交操作
- 使用符合规范的提交信息
- 关联相关的issue编号
- 明确指出变更类型和内容

### 3. 合并操作
- 通过PR/MR流程发起合并请求
- 指定适当的审核者
- 提供合并的背景和测试方法
- 等待必要的审核通过和CI通过

### 4. 发布准备
- 更新版本号（遵循语义化版本）
- 确保所有文档与代码同步
- 准备发布说明和升级指南

## 提交后任务

- 更新相关issue状态
- 部署到相应环境
- 通知相关团队和用户
- 监控系统表现，确保无异常
- 记录发布结果和问题

## 版本管理规范

### 语义化版本控制
- 遵循[主版本号].[次版本号].[修订号]格式
- 主版本号：不兼容的API变更
- 次版本号：向下兼容的功能性新增
- 修订号：向下兼容的问题修正
- 先行版本号可附加在修订号之后（如1.0.0-alpha.1）

### 版本标签
- 每个发布版本必须打tag：`v<version>`
- 重要里程碑添加详细说明
- tag必须签名以保证真实性
- 描述主要变更和注意事项

### 发布管理
- 重要版本需要发布说明
- 明确兼容性信息和升级步骤
- 记录已知问题和解决方案
- 鸣谢贡献者和支持人员

## 示例

<example>
  # 提交示例

  ## 合规的提交信息

  ```
  feat(auth): 添加JWT认证中间件

  实现基于JWT的用户认证机制，包括：
  - 令牌生成和解析
  - 认证中间件
  - 集成用户服务

  解决问题 #123
  ```

  ```
  fix(login): 修复多次失败登录未锁定账户的问题

  当用户连续登录失败5次后，现在会自动锁定账户30分钟，
  防止暴力破解攻击。

  修复 #145
  ```

  ```
  docs(api): 更新认证API文档

  更新了认证相关API的参数说明和示例代码，使其与最新实现保持一致。
  ```

  ## 分支合并示例

  ```bash
  # 在开发完成并通过审核后
  $ git checkout feature/user-auth
  $ git pull origin development  # 同步最新的开发分支

  # 解决可能的冲突
  $ git status
  $ git add .
  $ git commit -m "merge: 解决与development分支的冲突"

  # 合并前最后测试
  $ npm test

  # 切换回目标分支并合并
  $ git checkout development
  $ git merge --no-ff feature/user-auth -m "merge: 合并用户认证功能"

  # 推送到远程
  $ git push origin development
  ```

  ## CHANGELOG更新示例

  ```markdown
  # 更新日志

  ## [1.2.0] - 2023-07-10

  ### 新增
  - 用户认证系统，支持JWT认证 (#123)
  - 用户资料管理页面 (#124)
  - 密码重置功能 (#125)

  ### 修复
  - 修复多次失败登录未锁定账户的问题 (#145)
  - 修复邮件发送延迟问题 (#146)

  ### 变更
  - 重构用户数据模型，改进性能和可维护性 (#130)
  - 更新依赖包至最新版本

  ## [1.1.0] - 2023-06-15

  ### 新增
  - 仪表盘数据可视化 (#110)
  - 用户偏好设置 (#112)
  ```
</example>

<example type="invalid">
  # 不规范的提交实践

  ## 不良提交信息

  ```
  添加了登录功能
  ```

  ```
  修复bug
  ```

  ```
  更新代码 - 2023-07-10
  ```

  ## 混乱的分支管理

  ```bash
  # 直接在主分支上开发
  $ git checkout main
  $ git add .
  $ git commit -m "实现登录"
  $ git push origin main
  ```

  ## 不完整的变更记录

  ```markdown
  # 变更

  ## 2023-07

  - 添加了登录
  - 修复了一些问题
  - 更新了依赖
  ```
</example>
