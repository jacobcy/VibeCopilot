---
description: 本规则定义测试阶段标准和实践。应在以下情况下应用：(1)编写单元测试时，(2)进行集成测试时，(3)执行性能测试时，(4)验证功能完整性时，(5)开展自动化测试时。规则确保代码质量可靠、功能完整、性能达标，为后续Review阶段提供质量保障。
globs: ["*.test.ts", "*.test.tsx", "*.test.js", "*.test.py", "*_test.py"]
---
# VibeCopilot 轻量测试流程

role: "质量保障专家" @qa_expert

## 核心定位

- 面向小团队的轻量级测试流程
- 确保核心功能正常工作，而非追求高覆盖率
- 不增加不必要的复杂度，保持测试简单实用
- 降低维护成本，聚焦业务价值

## 测试策略

### 核心功能测试（优先级高）
- 覆盖用户主要使用路径
- 验证关键业务流程
- 确保基本数据处理正确
- **目标覆盖率**: 确保关键功能有基本测试，无需追求具体百分比

### 回归测试（优先级中）
- 针对已修复的bug编写测试
- 防止bug重新出现
- 在进行重构时确保功能不会退化

### 性能测试（按需执行）
- 只针对性能敏感区域
- 简单的负载测试验证响应时间
- 无需复杂的性能测试框架

## 测试工具选择

- **前端测试**: 使用Jest/Vitest，优先测试复杂组件和业务逻辑
- **后端测试**: 使用Pytest，专注API响应测试
- **UI测试**: 最小化，只测关键流程
- **模拟数据**: 使用简单的固定测试数据，避免复杂的mock设置

## 测试编写指南

```javascript
// 好的测试示例 - 简单直接
test('用户可以登录', async () => {
  const result = await loginUser('test@example.com', 'password');
  expect(result.success).toBe(true);
});

// 避免的模式 - 过度复杂
test('用户登录流程包含所有边缘情况和错误处理', async () => {
  // 过多的设置和边缘情况测试，不必要的复杂度
});
```

## 测试流程

```mermaid
flowchart TD
    A[开发新功能] --> B[编写最小测试集]
    B --> C[验证核心功能]
    C --> D{功能正常?}
    D -->|否| E[修复问题]
    E --> C
    D -->|是| F[合并代码]
    G[发现bug] --> H[添加回归测试]
    H --> I[修复bug]
    I --> J[验证修复]
```

## 最佳实践

1. **测试要点，不要面面俱到**：专注于重要功能和边缘情况
2. **保持测试简单**：一个测试只验证一个行为点
3. **使用适当的测试粒度**：核心功能做单元测试，用户流程做集成测试
4. **平衡测试投入**：测试编写时间不应超过功能开发时间
5. **维护测试**：随着代码变化更新测试，删除过时测试

## 与Flow检查点集成

对flow.mdc强制检查点的调整：
- **强制检查点 8**：~~整体测试覆盖率必须≥70%~~ → 核心功能必须有基本测试覆盖
- **强制检查点 9**：~~核心功能测试覆盖率必须≥85%~~ → 关键用户路径必须有测试覆盖
- **强制检查点 10**：现有测试必须全部通过

## 故障排除

| 问题 | 解决方案 |
| ---- | ---- |
| 测试运行时间过长 | 使用`/test quick`只运行关键测试 |
| 测试不稳定（偶尔失败） | 检查异步操作和测试环境隔离 |
| 功能变化导致大量测试失败 | 使用`/test update <component>`批量更新测试预期 |

## 注意事项

- 避免过度模拟(mock)，使用真实组件/服务更可靠
- 测试代码也是代码，保持简洁和可维护性
- 定期清理不再需要的测试
- 优先修复测试失败，保持测试套件的可信度

---
此规则为小团队提供实用的测试指南，专注于保障核心功能质量，避免过度测试带来的负担 🎯
