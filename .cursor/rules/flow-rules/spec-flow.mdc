---
description: 本规则定义开发计划制定标准。应在以下情况应用：(1)针对PRD文档制定开发计划时，(2)进行技术选型时，(3)设计系统架构时，(4)定义接口规范时，(5)评估开发工作量时。规则确保开发计划的完整性、技术选型的合理性和开发任务的清晰分解，为后续开发阶段提供明确的技术指导。
globs: ["*.md", "*.json", "*.yaml"]
alwaysApply: false
---

# VibeCopilot 开发计划制定标准

role: "文档专家" @document_expert

## 流程定位与前置条件

- 位于VibeCopilot核心开发流程的PRE-FLOW到FLOW过渡阶段
- **必须有经过批准的PRD文档（状态为"Approved"）**
- 开始前应充分理解需求背景和业务价值
- 必须了解现有系统架构和技术栈限制

## 开发计划文档标准

### 必备元素
- **标题与关联PRD**：明确关联到对应的PRD文档
- **状态跟踪**：计划当前状态（draft, review, approved）
- **技术选型**：所选技术及理由，优先使用项目标准技术栈
- **架构设计**：组件图、数据流图和交互模型
- **数据模型**：数据结构和关系定义
- **接口设计**：API接口规范
- **工作分解**：任务分解（不超过8小时单位）和工时估计
- **风险评估**：潜在技术风险和缓解措施
- **时间规划**：开发里程碑和交付时间表

### 架构设计与技术选型
- 遵循前后端分离原则
- 新技术引入必须有充分理由和评估
- 采用模块化和组件化设计
- 考虑技术成熟度、社区支持和学习曲线
- 评估对性能、安全和可维护性的影响

## 交付与审批

### 交付成果
- **开发计划文档**：`docs/dev-plan/[功能名称].md`
- **架构设计图**：`docs/architecture/`
- **API规范文档**：`docs/api/`
- **数据模型定义**：`docs/data-model/`

## 模板关联定义

### 架构设计模板 (@arch-template.md)

- **使用时机**:
  - PRD确认后，开始开发前的初始架构设计
  - 系统重构或技术栈变更时
  - 性能优化需要架构层面调整时
- **状态流转**: draft → review → approved
- **关键字段**:
  - `epic_id`: 关联的Epic ID
  - `status`: 架构文档状态
  - `technical_summary`: 技术实现概要
  - `architecture_diagram`: 系统架构图(Mermaid格式)
  - `model_schema`: 数据模型定义
  - `api_spec`: API接口定义
- **注意事项**:
  - 架构设计必须由技术负责人审核
  - 重大架构变更需要重新审核
  - 必须包含技术风险评估

## 架构评审标准

架构设计必须满足以下标准才能被批准:

1. **完整性**: 包含所有必要组件和接口定义
2. **一致性**: 与项目技术栈和开发约定保持一致
3. **可扩展性**: 能够支持未来功能扩展
4. **安全性**: 考虑基本安全措施
5. **可测试性**: 架构设计便于编写单元测试和集成测试
6. **性能考量**: 考虑系统性能瓶颈和优化策略

## 工作流程

```mermaid
flowchart TD
    A[PRD批准] --> B[创建架构设计]
    B --> C[技术评审]
    C --> D{审核通过?}
    D -->|否| E[修改架构设计]
    E --> C
    D -->|是| F[架构设计批准]
    F --> G[开始开发]
    H[重大技术变更] --> I[更新架构设计]
    I --> C
```
