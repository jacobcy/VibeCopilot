---
description: 本规则定义开发工作流生命周期。应在以下情况下应用：(1)启动新功能开发时，(2)迭代规划时，(3)代码实现阶段，(4)测试与发布阶段。规则确保开发全生命周期的标准化和可追踪性，与其他流程规则协同工作，形成完整的开发体系。
globs:
alwaysApply: false
---

# VibeCopilot 开发生命周期规范

## 关键规则

### 生命周期阶段划分
- **PRE-FLOW阶段**：需求分析与文档编写，由spec-flow规则管理
- **PLANNING阶段**：史诗与故事规划，由story-flow规则管理
- **DEVELOPMENT阶段**：代码实现与测试，由flow规则管理
- **REVIEW阶段**：代码审查与质量控制
- **RELEASE阶段**：部署与发布管理
- **POST-FLOW阶段**：规则优化与知识沉淀，由rule-flow规则管理

### 阶段间衔接规则
- PRE-FLOW必须产出经确认的PRD和架构文档
- PLANNING必须创建与PRD对应的Epic和Story结构
- DEVELOPMENT必须遵循分支管理和提交规范
- REVIEW必须确保代码质量和测试覆盖
- RELEASE必须生成完整的变更记录
- POST-FLOW必须沉淀开发经验形成规则优化

### 工作流度量标准
- 每个阶段必须有明确的输入/输出标准
- 各阶段必须有完成标志和验收条件
- 阶段间衔接必须有正式交接流程
- 全流程必须可追踪和可审计
- 积累历史数据用于持续优化流程

## 阶段详细说明

### PRE-FLOW阶段
- **主要角色**：需求分析师、架构师
- **主要工具**：文档模板、设计工具
- **输出物**：PRD文档、架构文档、技术规格
- **完成标志**：文档状态为"approved"
- **后续阶段**：PLANNING阶段

### PLANNING阶段
- **主要角色**：项目经理、技术负责人
- **主要工具**：敏捷故事板、时间线工具
- **输出物**：Epic-Story-Task结构、迭代计划
- **完成标志**：所有Story指派完成，时间线确定
- **后续阶段**：DEVELOPMENT阶段

### DEVELOPMENT阶段
- **主要角色**：开发人员、测试人员
- **主要工具**：代码仓库、CI/CD管道
- **输出物**：功能实现、单元测试、集成测试
- **完成标志**：功能完成，测试通过
- **后续阶段**：REVIEW阶段

### REVIEW阶段
- **主要角色**：技术负责人、开发同行
- **主要工具**：代码审查工具、质量分析工具
- **输出物**：审查报告、质量度量
- **完成标志**：代码获得批准，合并到主分支
- **后续阶段**：RELEASE阶段

### RELEASE阶段
- **主要角色**：发布经理、运维人员
- **主要工具**：部署工具、监控系统
- **输出物**：可部署包、变更记录、发布说明
- **完成标志**：成功部署到目标环境
- **后续阶段**：POST-FLOW阶段

### POST-FLOW阶段
- **主要角色**：技术负责人、规则维护者
- **主要工具**：规则管理系统、知识库
- **输出物**：规则更新、最佳实践文档
- **完成标志**：经验沉淀完成，规则更新发布
- **循环回归**：流程优化后进入新的PRE-FLOW阶段

## 示例

<example>
  # 功能开发工作流示例

  ## PRE-FLOW阶段

  1. 需求收集与分析
     ```
     - 与产品经理讨论认证功能需求
     - 分析用户场景和使用流程
     - 确定核心功能边界
     ```

  2. 文档编写与确认
     ```
     - 编写用户认证PRD文档
     - 架构师设计认证系统架构
     - 确认文档并获得批准
     ```

  ## PLANNING阶段

  1. 敏捷规划
     ```
     - 创建"用户认证"Epic
     - 拆分为"用户注册"、"用户登录"等Story
     - 将Story划分为具体任务
     ```

  2. 资源分配
     ```
     - 分配任务给团队成员
     - 制定时间线和交付计划
     - 设置里程碑和检查点
     ```

  ## DEVELOPMENT阶段

  1. 分支创建与开发
     ```
     - 创建feature/story-001-user-auth分支
     - 实现用户认证API
     - 编写单元测试和集成测试
     ```

  2. 持续集成
     ```
     - 定期合并最新develop分支
     - 运行自动化测试
     - 解决冲突和问题
     ```

  ## REVIEW阶段

  1. 代码审查
     ```
     - 创建Pull Request
     - 至少两名同事审查代码
     - 解决审查中发现的问题
     ```

  2. 质量控制
     ```
     - 确保测试覆盖率达到80%以上
     - 运行安全扫描和性能测试
     - 确认功能符合验收标准
     ```

  ## RELEASE阶段

  1. 版本准备
     ```
     - 创建release/v1.2.0分支
     - 生成变更日志
     - 更新版本号和文档
     ```

  2. 部署流程
     ```
     - 部署到测试环境验证
     - 修复发现的问题
     - 部署到生产环境
     ```

  ## POST-FLOW阶段

  1. 经验总结
     ```
     - 回顾项目经验和教训
     - 识别流程中的优化点
     - 沉淀技术和业务知识
     ```

  2. 规则更新
     ```
     - 更新认证相关开发规则
     - 改进工作流程效率
     - 分享最佳实践
     ```
</example>
