---
description: 本规则定义了AI行为固化系统，作为POST-FLOW阶段的知识沉淀工具。应在以下情况下应用：(1)特定AI行为需要固化时，(2)需要使Cursor能够使用开发后的脚本，(3)开发完成后总结经验教训时，(4)需要创建或更新规则时。本规则配合rule.mdc使用，确保AI行为和知识能够系统化保存，形成持续改进的闭环。
alwaysApply: false
---

# VibeCopilot AI行为固化与规则生成系统

## 关键规则

### 规则触发条件
- 特定AI行为模式需要在多个项目中复用时
- 开发脚本需要与Cursor集成时
- 开发中出现的有效AI互动模式需要标准化时
- 开发周期结束，需要总结经验时
- 发现流程或代码中的可复用最佳实践时
- 用户明确请求创建或更新规则时
- 重复出现的开发问题需要标准化解决方案时

### 规则类型判断
- AI行为固化类：将特定AI交互模式转化为可复用规则
- 脚本集成类：与开发后的自定义脚本集成相关的规则
- 代码规范类：与特定编程语言或框架相关的编码规范
- 流程规范类：与开发流程、协作方式相关的规范
- 工具使用类：与特定工具使用相关的操作指南
- 架构设计类：与系统架构设计相关的原则和模式
- 角色行为类：与AI扮演特定角色相关的行为规范

### 规则内容结构
- 每个规则必须包含标题、描述和关键原则
- 必须包含何时应用的明确触发条件
- 必须包含良好示例和反面示例
- 应当清晰说明与其他规则的关系
- 规则语言必须简洁、明确，避免模糊表述

### 规则存储与管理
- 严格遵循rule.mdc定义的规则类型和存储标准
- 规则按类型存储在`.cursor/rules/`对应子目录中
- 规则文件必须使用`.mdc`扩展名
- 规则总行数原则上不超过200行
- 所有规则必须在规则索引文件中登记
- 规则变更必须记录变更原因和时间

## 与rule.mdc的配合关系

- 严格遵循rule.mdc定义的规则类型分类和优先级
- 使用rule.mdc规定的标准结构创建规则文件
- 遵循rule.mdc的规则执行流程进行规则应用
- 为rule.mdc提供实际应用场景和示例
- 作为rule.mdc的实现者，负责具体规则的生成和维护

## 与开发流程的关联

- 负责将重复性AI交互模式转化为可复用规则
- 确保开发后的脚本能够与Cursor有效集成
- 接收workflow-flow中POST-FLOW阶段输入的经验总结
- 将story-flow中项目完成后的反思转化为规则
- 吸收spec-flow中文档体系的最佳实践
- 与flow规则协作，确保新规则能融入标准开发流程
- 形成规则后反馈到新的PRE-FLOW阶段，完成闭环

## 规则文件标准结构

```markdown
---
description: 简明描述，说明规则用途和应用场景
globs: ["*.ts"]  # 可选，适用于自动触发的规则
alwaysApply: false  # 是否全局自动应用
---

# 规则标题

## 关键规则
- 核心原则1
- 核心原则2
- 核心原则3

## 详细说明
详细解释规则内容和实施方法...

## 示例
<example>
// 符合规则的示例代码或流程
</example>

<example type="invalid">
// 不符合规则的示例
</example>
```

## 示例

<example>
  # AI行为固化示例

  ## 1. 识别需要固化的AI行为

  开发团队发现在与AI助手交互过程中，特定提问模式能获得更高质量的代码输出：

  ```
  我们发现，当要求AI生成TypeScript接口时，提供明确的业务规则和字段约束，
  并要求AI逐步解释设计决策，能大幅提高类型定义的准确性。这种交互模式
  应当被固化为标准规则。
  ```

  ## 2. 创建AI行为固化规则

  ```markdown
  ---
  description: 本规则定义了获取高质量TypeScript接口定义的AI交互模式。
  globs: ["*.ts", "*.tsx"]
  alwaysApply: false
  ---

  # TypeScript接口定义AI交互模式

  ## 关键规则
  - 提供完整的业务场景和用例
  - 明确每个字段的数据类型、约束和验证规则
  - 要求AI逐步解释类型设计决策
  - 使用具体示例说明边界情况

  ## 交互模板

  ### 请求模板
  ```
  我需要为[业务场景]创建TypeScript接口定义。

  业务规则:
  1. [规则1]
  2. [规则2]

  字段要求:
  - [字段1]: [类型], [约束条件]
  - [字段2]: [类型], [约束条件]

  请逐步解释你的类型设计决策，尤其是处理[特殊情况]的考虑。
  ```

  ### 验证检查表
  - 接口是否覆盖所有业务规则?
  - 字段类型是否精确?
  - 是否处理了可选/必选字段?
  - 是否考虑了边界情况?
  ```

  ## 3. 集成开发脚本

  创建脚本使Cursor能够直接应用此交互模式：

  ```typescript
  // scripts/cursor-integration/typescript-interface-generator.ts

  export function generateTypeScriptInterface(businessContext, fields, specialCases) {
    const prompt = `我需要为${businessContext}创建TypeScript接口定义...`;

    // 与Cursor集成的代码
    return {
      prompt,
      validationChecklist: [
        "接口是否覆盖所有业务规则?",
        "字段类型是否精确?",
        // ...其他检查项
      ]
    };
  }
  ```

  ## 4. 应用到新项目

  在下一个项目中，开发者只需使用:

  ```
  @typescript-interface AI指令
  业务场景: 用户订单管理
  字段:
    - orderId: string, 唯一标识
    - items: OrderItem[], 至少1项
  特殊情况: 处理订单取消状态
  ```

  Cursor将使用固化的AI行为规则生成高质量接口定义。
</example>

<example type="invalid">
  # 不规范的AI行为记录

  有时候要让AI助手做TS接口:

  ```
  写个用户类型的接口
  ```

  AI回复的代码都不太好，应该怎么改进？

  问题:
  - 没有将有效的交互模式系统化
  - 没有提供明确的集成方式
  - 没有遵循rule.mdc的规则结构
  - 缺乏具体示例和反面示例
  - 未说明与开发流程的关联
</example>
