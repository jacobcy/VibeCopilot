---
description: Cursor命令配置，用于调用VibeCopilot命令系统
globs:
alwaysApply: false
---

# VibeCopilot Cursor命令配置

## 命令映射

### /check 命令
```json
{
  "name": "check",
  "description": "检查项目状态",
  "command": "python -m src.cli.cursor_commands '/check {args}'",
  "args": {
    "init": {
      "type": "boolean",
      "description": "初始化路线图文件"
    },
    "update": {
      "type": "boolean",
      "description": "更新已有路线图文件"
    }
  }
}
```

### /update 命令
```json
{
  "name": "update",
  "description": "更新任务状态",
  "command": "python -m src.cli.cursor_commands '/update {args}'",
  "args": {
    "id": {
      "type": "string",
      "description": "任务ID或名称",
      "required": true
    },
    "status": {
      "type": "string",
      "description": "新状态(todo/in_progress/completed)",
      "enum": ["todo", "in_progress", "completed"]
    },
    "github": {
      "type": "boolean",
      "description": "同步到GitHub"
    }
  }
}
```

### /story 命令
```json
{
  "name": "story",
  "description": "查看当前开发故事",
  "command": "python -m src.cli.cursor_commands '/story {args}'",
  "args": {
    "milestone": {
      "type": "string",
      "description": "里程碑ID"
    },
    "all": {
      "type": "boolean",
      "description": "显示所有故事和状态"
    }
  }
}
```

### /task 命令
```json
{
  "name": "task",
  "description": "管理任务",
  "command": "python -m src.cli.cursor_commands '/task {args}'",
  "args": {
    "id": {
      "type": "string",
      "description": "任务ID"
    },
    "status": {
      "type": "string",
      "description": "任务状态",
      "enum": ["todo", "in_progress", "completed", "blocked"]
    },
    "assignee": {
      "type": "string",
      "description": "指定负责人"
    },
    "list": {
      "type": "boolean",
      "description": "列出所有未完成任务"
    }
  }
}
```

### /plan 命令
```json
{
  "name": "plan",
  "description": "创建新计划",
  "command": "python -m src.cli.cursor_commands '/plan {args}'",
  "args": {
    "type": {
      "type": "string",
      "description": "计划类型",
      "enum": ["milestone", "task"],
      "required": true
    },
    "title": {
      "type": "string",
      "description": "计划标题",
      "required": true
    },
    "milestone": {
      "type": "string",
      "description": "所属里程碑ID"
    },
    "priority": {
      "type": "string",
      "description": "优先级",
      "enum": ["P0", "P1", "P2", "P3"]
    }
  }
}
```

## 命令执行规范

### 1. 命令调用流程
- Cursor接收用户输入的命令
- 解析命令参数
- 调用对应的Python模块执行命令
- 捕获并格式化输出结果
- 显示执行结果或错误信息

### 2. 错误处理
- 命令不存在：显示可用命令列表
- 参数错误：显示正确的参数格式
- 执行失败：显示错误原因和解决建议
- 权限问题：提示用户进行必要的配置

### 3. 输出格式
- 成功执行：显示操作结果和相关信息
- 警告信息：使用黄色标记提示
- 错误信息：使用红色标记提示
- 帮助信息：显示命令用法和示例

## 示例

<example>
  用户: `/check --update`

  系统执行:
  ```bash
  python -m src.cli.cursor_commands '/check --update'
  ```

  输出:
  ```
  🔍 项目状态检查：

  当前活跃里程碑: M2 "核心功能开发阶段"
  总体进度: ██░░░░░░░░ 20%

  任务统计:
  - 已完成: 3
  - 进行中: 1
  - 待开始: 3

  路线图文件已更新: data/roadmap.yaml
  ```
</example>

<example type="invalid">
  用户: `/update`

  系统执行:
  ```bash
  python -m src.cli.cursor_commands '/update'
  ```

  输出:
  ```
  ❌ 错误: 缺少必需的参数 --id

  正确用法:
  /update --id=<任务ID> [--status=<状态>] [--github]

  示例:
  /update --id=T2.1 --status=completed
  ```
</example>
