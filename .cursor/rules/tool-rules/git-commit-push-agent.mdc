---
description: This rule governs the process of committing and pushing changes to git repositories. It should be applied whenever: (1) The user indicates they want to commit or push changes, (2) The user asks about git commit conventions, (3) The user wants to update or save their work to git, or (4) Any git-related commit and push operations are requested. The rule ensures consistent commit message formatting, proper change documentation, and maintainable git history. It's particularly important for maintaining clear project history, facilitating code reviews, and ensuring proper documentation of changes. This rule helps maintain high-quality commit messages that explain both what changed and why, making it easier for both humans and AI to understand the project's evolution.
globs:
alwaysApply: false
---
# Git Commit and Push Conventions

## 规则关系
本规则与以下规则紧密配合：
- `flow.mdc`: 遵循流程检查点，确保符合强制流程规范
- `branch-cmd.mdc`: 确保在正确的分支上进行提交操作
- `commit-flow.mdc`: 提供高层次的提交流程和标准

## Critical Rules

- Always run `git add .` from the workspace root to stage changes
- Review staged changes before committing to ensure no unintended files are included
- Format commit titles as `type(scope): brief description [task-id]` where type is one of:
  - feat: new feature
  - fix: bug fix
  - docs: documentation changes
  - style: formatting, missing semi colons, etc
  - refactor: code restructuring
  - test: adding tests
  - chore: maintenance tasks
- Keep commit title brief and descriptive (max 72 chars)
- Add two line breaks after commit title
- Include a detailed body paragraph explaining:
  - What changes were made
  - Why the changes were necessary
  - Any important implementation details
- End commit message with " -Agent Generated Commit Message"
- Push changes to the current remote branch

## 分支与提交集成流程

### 1. 检查工作分支
```bash
# 确认当前在正确的任务分支上
git branch
```

### 2. 准备提交
```bash
# 查看更改内容
git status
git diff

# 暂存更改
git add .
```

### 3. 提交更改
```bash
# 使用规范格式提交
git commit -m "feat(module): implemented feature X [T123]

Detailed explanation of what was changed and why.
Additional context or implementation details.

-Agent Generated Commit Message"
```

### 4. 与远程同步
```bash
# 推送到远程分支
git push origin feature/T123-feature-name
```

## 流程检查点集成

- 提交前自动检查代码是否符合项目规范
- 验证提交信息格式是否正确
- 确保关联了正确的任务ID
- 检查是否在正确的分支上提交

## Examples

<example>
feat(auth): add user authentication system [T123]

Implemented JWT-based user authentication system with secure password hashing
and token refresh functionality. This change provides secure user sessions
and prevents unauthorized access to protected routes. The implementation
uses bcrypt for password hashing and includes proper token expiration handling.

-Agent Generated Commit Message
</example>

<example>
fix(login): resolve account lockout issue [T456]

Fixed bug where users weren't locked out after multiple failed login attempts.
Now accounts are automatically locked for 30 minutes after 5 consecutive
failed attempts to prevent brute force attacks. Added unit tests to verify
this behavior works correctly.

-Agent Generated Commit Message
</example>

<example type="invalid">
updated stuff

fixed some bugs and added features
</example>
