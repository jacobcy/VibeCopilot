---
description: VibeCopilot项目的核心概念定义和约定，确保术语理解一致
globs:
alwaysApply: true
---

# VibeCopilot 核心概念约定

## 系统架构概念

### 命令系统 (Command System)

**定义**：VibeCopilot的命令处理架构，包括命令解析、路由和执行的完整流程。

**组成部分**：
- **命令处理器 (Command Handler)**：负责执行具体命令逻辑的组件
- **命令解析器 (Command Parser)**：将用户输入转换为结构化命令对象的组件
- **命令类 (Command Classes)**：定义各类命令的具体实现类

**重要约定**：
- 所有命令类必须继承自`BaseCommand`基类
- 命令类需实现`execute`方法处理命令逻辑
- 命令处理应捕获异常并提供清晰错误消息

### 规则系统 (Rule System)

**定义**：定义特定行为、约束或指导原则的结构化文档系统，用于指导AI助手或系统的行为。

**关键组件**：
- **规则文件 (Rule Files)**：存储在`.cursor/rules/`目录下的`.mdc`文件
- **规则引擎 (Rule Engine)**：管理规则生命周期的系统组件
- **规则模板 (Rule Templates)**：用于生成规则的预定义结构

**规则分类**：
- **核心规则 (Core Rules)**：定义基础行为和系统约定
- **开发规则 (Dev Rules)**：定义开发流程和实践
- **流程规则 (Flow Rules)**：定义特定工作流程和步骤
- **命令规则 (Command Rules)**：定义命令的使用方式和语法
- **角色规则 (Role Rules)**：定义专家角色的行为和职责
- **工具规则 (Tool Rules)**：定义工具的使用方式和约束

**重要约定**：
- 规则文件必须包含FrontMatter元数据部分
- 规则文件必须使用Markdown格式，扩展名为`.mdc`
- 规则文件名应使用连字符命名法(kebab-case)

### 数据存储系统 (Data Storage System)

**定义**：VibeCopilot的数据持久化层，负责存储项目配置、规则元数据和知识内容。

**组成部分**：
- **元数据数据库**：使用关系型数据库存储结构化数据
  - 存储模板元数据、规则索引、命令历史等
- **向量数据库**：存储规则内容的向量表示
  - 支持语义搜索和规则检索

**重要约定**：
- 元数据使用关系型数据库模型
- 规则搜索使用向量嵌入和语义检索
- 不直接使用文件系统存储规则内容

## 命令类型与区分

### 规则命令 (Rule Command)

**定义**：在Cursor IDE中使用的、以斜杠开头的自然语言交互命令。

**特点**：
- 以斜杠(`/`)开头，如`/rule list`
- 由Cursor Agent (AI助手)通过规则系统解释
- 支持自然语言变体和上下文理解
- 执行过程对用户透明可见

**约定用法**：
- 在规则文件中提及规则命令但不执行时使用`{/命令名}`格式
- 在示例中展示命令使用时使用`/命令名 [参数]`格式
- 引用规则但不执行时使用`@规则名`格式

### 命令行命令 (CLI Command)

**定义**：通过终端执行的、由Python代码实现的命令行接口。

**特点**：
- 在终端中执行，如`vibecopilot rule list`
- 由原生Python代码直接处理
- 遵循严格的参数语法
- 不涉及AI助手交互

**重要约定**：
- CLI命令应提供帮助文档(--help)
- CLI命令必须处理各种错误情况
- CLI命令需返回标准化结构的结果

## 组件关系与流程

### 命令与规则的关系

**规则命令到CLI命令的映射**：
- 用户在Cursor中输入规则命令(如`/task create`)
- Cursor Agent根据规则解析命令意图
- Cursor Agent调用对应的CLI命令(如`vibecopilot task create`)
- CLI命令执行并返回结果
- Cursor Agent格式化结果并显示给用户

**约定调用流程**：
1. 规则引擎加载规则
2. 用户输入规则命令
3. 命令解析器识别命令
4. 命令处理器执行命令
5. 结果格式化器处理输出
6. 呈现结果给用户

### 规则生命周期

**规则生成流程**：
1. 选择适当的规则模板
2. 准备规则变量和内容
3. 使用模板引擎渲染规则文件
4. 保存规则文件到规则目录
5. 更新规则元数据到数据库
6. 创建规则内容的向量表示并存入向量数据库
7. 规则引擎加载新规则

**规则搜索流程**：
1. 接收用户查询
2. 创建查询的向量表示
3. 在向量数据库中计算相似度
4. 返回最相关的规则
5. 应用规则处理用户输入

**规则更新约定**：
- 规则更新应保持向后兼容
- 重大变更需更新规则版本号
- 规则变更需记录在CHANGELOG中
- 更新规则时同步更新元数据和向量表示

## 核心文件类型与命名规范

- **规则文件**：`[规则类型]-[规则名称].mdc`
- **命令文件**：`[命令名]_command.py`
- **模板文件**：`[模板类型]_template.j2`

## 开发流程约定

### 命令开发流程

**步骤**：
1. 实现命令处理器
2. 测试命令行接口功能
3. 创建对应的规则文件
4. 定义规则命令的使用方式和示例
5. 测试规则命令在Cursor中的行为

**文件拆分约定**：
- 命令超过300行时应拆分为多个文件
- 推荐拆分为：主命令类、命令处理器、辅助工具

### 规则开发流程

**步骤**：
1. 确定规则类型和目标
2. 选择或创建合适的模板
3. 定义规则内容和示例
4. 测试规则在Cursor中的行为
5. 更新术语表（如有新概念）

**约定**：
- 规则应包含明确的使用场景说明
- 规则应包含正确和错误的使用示例
- 规则应指定应用条件（如适用的文件类型）

## 参考示例

### 规则命令示例

在Cursor IDE中输入:
```
/rule list  # 列出所有规则
/task create "完成文档"  # 创建新任务
/help story  # 查看story命令帮助
```

### CLI命令示例

在终端中执行:
```bash
vibecopilot rule list  # 列出所有规则
vibecopilot task create --name="完成文档"  # 创建新任务
vibecopilot help story  # 查看story命令帮助
```

### 规则和CLI命令映射示例

| 规则命令 | CLI命令 | 功能描述 |
|---------|--------|---------|
| `/rule list` | `vibecopilot rule list` | 列出所有规则 |
| `/task create "任务名"` | `vibecopilot task create --name="任务名"` | 创建新任务 |
| `/check status` | `vibecopilot check --status` | 检查项目状态 |
| `/flow story` | `vibecopilot flow story` | 执行完整故事流程 |
| `/memory search "关键词"` | `vibecopilot memory search --query="关键词"` | 搜索知识库 |

## 术语参考

完整的术语定义请参考：`/docs/user/vibe-interface/glossary.md`
