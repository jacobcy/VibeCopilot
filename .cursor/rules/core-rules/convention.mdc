---
description: VibeCopilot项目的通用开发约定，包括命名规范、代码组织和提交标准
globs:
alwaysApply: true
---
# 通用开发约定与规范

## 通用开发流程五步法

1. **遵守规范**：严格遵循项目规范和编码标准
2. **确认需求**：明确目标和范围，理解业务价值
3. **制定计划**：编写计划文档，确定验证方法
4. **修改代码**：一次只实现一个功能点，保持小步快速迭代
5. **总结报告**：记录开发过程和结果，沉淀经验

## 通用开发沟通原则

- 主动确认不明确的需求，避免基于假设开发
- 修改前说明将要改动的内容和潜在影响
- 及时反馈问题和进展，不隐藏风险
- 保持专业和谨慎的态度，注重团队协作
- 复杂问题使用系统化思考方法分析

## 通用命名规范

- 文件、变量、函数等命名应清晰表达其用途和含义
- 避免使用缩写，除非是约定俗成的缩写
- 不同编程语言遵循其各自的命名规范
- 项目中保持一致的命名风格
- 避免使用无意义的名称如temp、foo等

## 通用文档与图表规范

- **使用Markdown**：所有文档使用Markdown格式编写
- **README规范**：每个主要目录都应有README.md说明文件
- **文档结构**：使用层级标题（#, ##, ###）组织内容
- **使用Mermaid语法**：所有流程图、类图、时序图必须使用Mermaid语法
- **图表简洁性**：图表应专注于关键元素，避免过度复杂
- **增加注释**：为复杂节点或连线添加说明

### 通用Mermaid图表示例
```mermaid
flowchart LR
    A[开始] --> B{条件判断}
    B -->|条件为真| C[执行操作1]
    B -->|条件为假| D[执行操作2]
    C --> E[结束]
    D --> E
```

## 通用代码质量标准

- 每个功能点应有基本的单元测试覆盖
- 优先使用异步/非阻塞操作，避免性能瓶颈
- 使用适当的数据结构和算法确保性能
- 安全敏感操作必须有适当的保护措施
- 遵循DRY原则，避免代码重复
- 错误处理必须明确，避免吞掉异常
- 尽量避免副作用，保持函数纯净

## VibeCopilot质量标准

- 代码覆盖率需达到70%以上
- CI通过率必须达到100%
- 代码审查必须有至少1位审阅者批准
- 关键功能必须有端到端测试
- 性能关键路径需有性能基准测试
- 所有文件行数应控制在合理范围内
- 文档必须及时更新，与代码保持同步

## 通用工具使用规范

- 优先使用项目推荐的工具链
- 工具使用应有明确的目的和价值
- 避免引入过多的外部依赖
- 定期更新工具版本，修复安全漏洞
- 记录工具使用的最佳实践

## 通用编程反模式避免

1. **不添加猜测性业务逻辑**：
   - 不基于假设添加业务层可能需要的功能
   - 不在模型层实现内容生成或质量评估逻辑

2. **不滥用继承**：
   - 优先使用组合而非继承
   - 保持类层次简单扁平

3. **不依赖具体业务流程**：
   - 模型组件不应假设特定业务流程
   - 避免硬编码业务规则

4. **避免过度封装**：
   - 不为简单操作创建复杂抽象
   - 保持接口简单直观

5. **避免全局状态**：
   - 减少使用全局变量
   - 状态应该局部化和容器化

6. **避免回调地狱**：
   - 使用现代异步处理方式
   - 保持代码的可读性和可维护性

## 通用Git提交规范

- 提交消息必须遵循约定式提交规范（Conventional Commits）
- 格式：`<类型>[可选的作用域]: <描述>`
- 常用类型：
  - `feat`: 新功能
  - `fix`: 修复bug
  - `docs`: 文档更新
  - `style`: 代码风格调整
  - `refactor`: 代码重构
  - `test`: 添加测试
  - `chore`: 构建过程或辅助工具变动
- 每次提交只做一件事
- 提交前检查代码质量和测试
- 及时推送变更，避免长时间未同步

## 示例

<example>
  // 好的Git提交消息
  "feat(auth): 添加用户认证功能"
  "fix(ui): 修复移动端按钮显示问题"
  "docs: 更新API文档和使用示例"
</example>

<example type="invalid">
  // 不良Git提交消息
  "添加了些东西"
  "修复bug"
  "更新"

  // 猜测性业务逻辑
  function processUserData(user) {
    // 假设用户可能需要这个特性
    if (user.role === 'admin') {
      enableSecretFeatures(); // 未在需求中明确的功能
    }
  }

  // 过度嵌套的条件判断
  function processPayment(order) {
    if (order.isValid) {
      if (order.hasItems) {
        if (order.paymentMethod === 'credit') {
          if (order.creditCard.isValid) {
            // 处理逻辑
          } else {
            // 处理错误
          }
        }
      }
    }
  }
</example>
