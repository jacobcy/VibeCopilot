---
description: VibeCopilot命令架构规则，确保术语理解一致
globs:
alwaysApply: false
id: command-architecture
title: "VibeCopilot命令架构规则"
type: architecture_rule
status: active
version: "1.0"
tags: [architecture, command, system, rule]
related_items: [command-system, rule-command, flow-command, roadmap-command, task-command, memory-command, status-command, template-system]
---

# VibeCopilot命令架构规则

## 命令架构概述

VibeCopilot采用双轨命令架构，结合规则命令（Rule Commands）和程序命令（CLI Commands）提供灵活而强大的交互方式。本规则定义命令架构的总体设计、组件关系和执行流程。

## 架构核心原则

1. **分离关注点**：规则命令负责交互和解释，程序命令负责执行和持久化
2. **一致性**：所有命令遵循统一的命名和结构约定
3. **可组合性**：命令可以组合形成复杂的工作流程
4. **可扩展性**：系统易于添加新命令和功能
5. **透明性**：命令执行过程和结果对用户透明可见

## 命令系统组件

```mermaid
graph TD
    A[用户输入] --> B{Cursor Agent}
    B -->|解析规则命令| C[规则系统]
    B -->|解析程序命令| D[CLI转换器]
    C --> E[规则应用]
    D --> F[终端执行]
    E --> G[结果处理]
    F --> G
    G --> H[响应格式化]
    H --> I[用户输出]
```

## 命令类型对比

| 特性 | 规则命令 (`/command`) | 程序命令 (`//command`) |
|-----|-------------------|---------------------|
| 前缀 | 单斜杠 `/` | 双斜杠 `//` |
| 处理方式 | Cursor Agent直接解释 | 转换为CLI命令执行 |
| 语法灵活性 | 高（支持自然语言变体） | 低（严格遵循CLI语法） |
| 执行环境 | AI上下文内 | 操作系统终端 |
| 持久化 | 有限（AI会话内） | 完整（写入磁盘/数据库） |
| 适用场景 | 简单查询、交互式指导 | 复杂操作、数据修改、批处理 |

## 命令体系架构

VibeCopilot命令体系由以下主要组件构成：

1. **核心命令集**：
   - `rule`: 规则管理
   - `flow`: 工作流定义和执行
   - `roadmap`: 路线图管理
   - `task`: 任务管理
   - `memory`: 知识库管理
   - `status`: 状态查看和管理
   - `template`: 模版管理

2. **支持系统**：
   - 数据库系统：存储命令执行状态和结果
   - 规则引擎：解释和应用规则
   - 会话管理：管理长时间运行的工作流

## 命令发现和帮助机制

用户可通过以下方式发现和学习命令：

1. **帮助命令**：`/help [command]`显示命令帮助
2. **命令列表**：`/help list`显示所有可用命令
3. **命令示例**：`/help examples [command]`显示用法示例
4. **上下文帮助**：输入部分命令后AI会提供相关建议

## 命令集成点

命令系统与其他系统的集成点：

1. **文件系统集成**：读取和写入文件
2. **数据库集成**：存储持久状态
3. **AI集成**：利用AI增强命令功能
4. **版本控制集成**：与Git交互
5. **外部API集成**：连接第三方服务

## 命令生命周期

命令的完整生命周期包括：

1. **输入解析**：识别命令类型和参数
2. **意图解析**：理解用户意图
3. **命令选择**：确定要执行的具体命令
4. **参数处理**：验证和准备参数
5. **执行**：执行命令逻辑
6. **结果收集**：获取执行结果
7. **响应格式化**：格式化结果以便显示
8. **后续建议**：提供可能的后续步骤

## 使用指南

### 规则命令使用建议

- 使用规则命令(`/<command>`)进行简单查询和交互
- 充分利用自然语言能力描述需求
- 通过对话方式进行命令探索和学习

### 程序命令使用建议

- 使用程序命令(`//<command>`)进行复杂或持久化操作
- 严格遵循命令参数规范
- 使用`--verbose`获取详细执行信息
- 对危险操作使用`--force`确认

## 命令最佳实践

1. **命令简洁性**：选择最直接的命令完成任务
2. **一致性**：在项目中始终使用一致的命令风格
3. **渐进性**：先尝试简单命令，需要时再使用复杂命令
4. **可追踪性**：使用`--verbose`记录关键操作
5. **自动化**：组合命令创建自动化工作流

## 未来发展方向

1. **更智能的命令推荐**：基于上下文自动推荐命令
2. **自定义命令**：允许用户定义自己的命令
3. **命令链**：支持命令管道和组合
4. **跨系统集成**：更深入集成外部工具和服务
5. **统一界面**：提供图形化命令界面
