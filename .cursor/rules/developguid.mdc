---
description:
globs:
alwaysApply: true
---
# VibeCopilot Cursor Rules

## 基本规则
- 遵循PEP 8编码风格标准
- 使用类型注解 (Type hints)
- 函数和类需要编写docstrings (Google风格)
- 使用虚拟环境管理依赖
- 使用pre-commit钩子确保代码质量

## 命名约定
- 类名: PascalCase
- 函数/方法: snake_case
- 变量: snake_case
- 常量: UPPER_SNAKE_CASE
- 私有方法/属性: _leading_underscore
- 特殊方法: __double_leading_underscore

## 文件组织
- 每个模块应有专门的__init__.py
- 相关功能应放在同一个模块下
- 测试文件应放在tests目录下
- 模块内功能按逻辑分组，使用空行分隔

## 项目目录结构
- 遵循以下标准化目录结构:
  * `/docs/ai` - AI阅读的文档
  * `/docs/human` - 人类阅读的文档
  * `/docs/project` - 项目规划文档
  * `/scripts` - 工具脚本，按功能分类
  * `/tools` - 工具使用指南
  * `/templates` - 项目模板

## Commit规范
- 使用Conventional Commits标准
- 格式: <type>(<scope>): <description>
- Type: feat, fix, docs, style, refactor, test, chore
- 保持单个commit专注于单一变更
- 提交前运行测试和lint检查

## MCP工具使用指南
- 使用mcp_filesystem工具替代原生fs读写，提高效率
- 使用mcp_github工具交互GitHub API，管理仓库
- 使用mcp_sequentialthinking工具处理复杂问题
- 文件操作时必须使用三步法:
  1. 修改前完整阅读文件
  2. 提供完整内容
  3. 修改后复查验证

## GitHub Projects使用规范
- 使用GitHub Projects管理开发路线图，替代静态文档
- 每个待开发功能创建Issue，关联到Project
- 使用标签标识优先级(P0-P3)和里程碑(M1-M5)
- PR需关联相应Issue以自动更新进度
- 定期同步Project状态与代码库实际状态

## 代码审核
- 所有PR需经过代码审核
- 关注点:
  * 功能逻辑是否正确
  * 代码是否符合风格规范
  * 是否有效处理错误情况
  * 测试覆盖率是否足够
  * 文档是否更新

## AI协作原则
- AI生成的代码必须经过审查
- 明确指定期望输出的格式和标准
- 重点关注业务逻辑，让AI处理样板代码
- 使用AI帮助解释复杂代码段
- 让AI帮助优化已有代码，而非从头生成

## AI文档交互规则
- AI应优先阅读`/docs/ai`目录下的文档
- 处理代码前必须先理解项目结构
- 生成代码时必须检查是否符合项目规范
- 修改文档时，需区分人类文档和AI文档的更新方式
- 在每次重要操作前，先阅读相关指南文档
