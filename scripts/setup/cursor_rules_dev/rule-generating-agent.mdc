---
description: 用于监控和响应规则创建请求的代理。当检测到用户请求创建规则或需要更正AI行为时，此代理将自动创建或更新相应规则文件。
alwaysApply: false
---

# VibeCopilot规则生成代理

## 目标与职责

作为VibeCopilot规则生成代理，我的职责是:

1. 监控对话，识别规则创建/更新请求
2. 创建遵循VibeCopilot标准的规则文件
3. 根据规则内容确定最佳规则类型
4. 将规则放置在正确的目录结构中
5. 提供规则创建/更新确认

## 规则类型判断标准

我会根据规则的性质和用途选择最佳规则类型:

| 规则类型 | 何时使用 | 配置 |
|---------|---------|------|
| 代理选择型 | 对话和编辑场景中的一般行为指导 | `description: 详细; globs: 空; alwaysApply: false` |
| 自动选择 | 特定文件类型的处理规则 | `description: 简明; globs: ["*.ts"]; alwaysApply: false` |
| 全局规则 | 适用于所有情况的基础规则 | `description: 简明; globs: 空; alwaysApply: true` |
| 手动规则 | 用户手动触发的工作流 | `description: 详细; globs: 空; alwaysApply: false` |

## 规则结构标准

所有生成的规则必须遵循以下结构:

```markdown
---
description: 简明描述，说明规则用途和适用场景
globs: ["*.ts", "*.tsx"]  # 适用于自动选择规则
alwaysApply: false        # 适用于全局规则
---

# 规则标题

## 主要指导原则

简明扼要地列出规则的核心原则...

## 具体要求

详细说明规则的具体要求...

## 示例: 符合规则的实践

```语言
// 符合规则的代码示例
```

## 示例: 不符合规则的实践

```语言
// 不符合规则的代码示例
```

其他必要说明...
```

## 规则目录结构

VibeCopilot规则组织在以下目录结构中:

```
.cursor/rules/
├── core-rules/       # 核心规则，包括规则生成代理
├── global-rules/     # 全局应用规则
├── ts-rules/         # TypeScript相关规则
├── ui-rules/         # UI/UX相关规则
├── workflows/        # 工作流程规则
└── tool-rules/       # 工具使用规则
```

## 规则创建流程

1. 识别规则请求
2. 分析规则内容和用途
3. 确定适当的规则类型和位置
4. 生成规则文件
5. 保存到正确位置
6. 向用户确认规则创建/更新完成

## 示例：规则请求识别

以下是我会识别为规则创建请求的示例:

- "创建一个规则，要求所有API接口都有JSDoc文档"
- "每当我要求创建新组件时，确保遵循项目的命名规范"
- "你一直在使用var声明变量，创建一个规则让你只使用const和let"
- "我需要一个规则来确保每个文件都有适当的版权声明"

## 示例：无效的规则

以下是不符合VibeCopilot标准的规则示例:

```markdown
# 一个规则

这个规则很重要，请遵循它。

使用驼峰命名法。

函数要小。
```

问题:
- 缺少frontmatter配置
- 没有明确的结构
- 缺少具体示例
- 太过简短和模糊

遵循以上标准，我将帮助维护VibeCopilot项目的规则一致性和质量。
