---
description: 本规则定义了VibeCopilot项目的开发工作流程和协作方式。应在以下情况下应用：(1)启动新功能开发时，(2)处理bug修复时，(3)进行代码审查时，(4)准备发布版本时，(5)进行项目规划与任务分配时。规则确保开发过程有序、高效，并保持代码质量和项目进度。特别关注任务管理、分支策略、代码审查流程、测试策略以及持续集成/持续部署实践。
globs:
alwaysApply: false
---
# VibeCopilot 开发工作流规范

## 关键规则

### 分支管理
- 使用 Git Flow 分支模型管理代码
- `main` 分支保持稳定，只接受合并请求
- `develop` 分支用于开发集成
- 功能开发在 `feature/*` 分支进行
- 缺陷修复在 `bugfix/*` 分支进行
- 发布准备在 `release/*` 分支进行
- 紧急生产修复在 `hotfix/*` 分支进行
- 分支命名使用小写字母和连字符，例如 `feature/user-authentication`

### 提交规范
- 使用约定式提交格式: `<type>(<scope>): <description>`
- 类型包括：feat、fix、docs、style、refactor、test、chore等
- 范围是可选的，表示变更影响的模块
- 描述简明扼要地说明本次提交的内容
- 每个提交应该是独立可测试的变更
- 避免在单个提交中混合多个不相关的变更

### 开发流程
- 每个任务必须在项目管理工具中创建对应的票据
- 开发前先拉取最新的 `develop` 分支
- 创建新的功能或修复分支
- 完成开发后，进行自测和单元测试
- 提交代码并创建合并请求（PR/MR）
- 合并请求需至少一名团队成员审查批准
- 合并后删除功能分支

### 代码审查
- 所有代码变更必须经过代码审查
- 审查重点关注代码质量、可读性和符合开发规范
- 审查应在提交后2个工作日内完成
- 审查意见应具体明确，避免模糊表述
- 代码作者应及时响应审查意见

### 测试要求
- 新功能必须包含单元测试
- 修复bug时必须添加能覆盖该bug的测试
- 提交前运行本地测试确保通过
- 重要功能应包含集成测试
- 前端组件应包含基本的UI测试

### 发布流程
- 发布前在 `release` 分支进行最终测试和准备
- 版本号遵循语义化版本（SemVer）规范
- 每次发布必须生成变更日志（Changelog）
- 发布需进行全面的回归测试
- 重大版本发布前应进行内部测试

## 示例

<example>
  # 功能开发流程示例

  1. 在项目管理工具中创建任务"添加用户登录功能"，标识为 USER-123

  2. 拉取最新代码并创建功能分支
     ```bash
     git checkout develop
     git pull
     git checkout -b feature/user-login
     ```

  3. 开发功能并编写测试
     ```typescript
     // 编写登录服务
     class AuthService {
       async login(username: string, password: string): Promise<LoginResult> {
         // 实现登录逻辑
       }
     }

     // 编写测试
     describe('AuthService', () => {
       it('should login user with correct credentials', async () => {
         // 测试代码
       });
     });
     ```

  4. 提交变更，引用任务编号
     ```bash
     git add .
     git commit -m "feat(auth): 实现用户登录功能 [USER-123]"
     git push -u origin feature/user-login
     ```

  5. 创建合并请求到 develop 分支
     - 标题: "feat(auth): 实现用户登录功能 [USER-123]"
     - 描述: 详细说明实现的功能、测试覆盖情况和注意事项

  6. 代码审查后合并
     ```bash
     # 合并后删除功能分支
     git checkout develop
     git pull
     git branch -d feature/user-login
     ```
</example>

<example type="invalid">
  # 不良工作流实践

  1. 直接在主分支上开发
     ```bash
     git checkout main
     # 直接修改代码...
     git commit -m "添加了登录功能"
     git push
     ```

  2. 混合多个功能在一个提交中
     ```bash
     # 同时修改了登录功能、用户资料和权限系统
     git commit -m "一些更新"
     ```

  3. 没有任务跟踪和代码审查
     - 直接开发而不创建任务
     - 自行合并代码而不经过审查
     - 不进行测试就部署到生产环境

  4. 不规范的分支管理
     - 使用不明确的分支名称如 "my-branch" 或 "temp"
     - 长期保留已合并的分支不删除
     - 多人在同一分支上开发不同功能
</example>
