---
description: 本规则定义了VibeCopilot项目的文档编写标准和格式要求。应在以下情况下应用：(1)创建或更新任何项目文档时，(2)编写代码注释时，(3)创建README或其他说明文件时，(4)编写API文档时，(5)撰写用户指南或帮助文档时。规则确保文档内容清晰、结构一致、格式规范，便于团队成员和用户理解和使用。特别关注文档的组织结构、语言表达、格式一致性以及内容的完整性和准确性。
globs:
alwaysApply: false
---
# VibeCopilot 文档格式规范

## 关键规则

### 文档结构
- 所有文档必须包含标题和简短描述
- 使用层级标题（#, ##, ###）组织内容
- 复杂文档应包含目录（TOC）
- 相关内容应分组到同一部分
- 使用列表和表格提高可读性

### 语言要求
- 使用清晰、简洁的语言表达
- 避免模糊不清的描述和主观评价
- 技术术语首次出现时应提供简短解释
- 使用一致的术语，避免同一概念使用不同表述
- 中英文混合时遵循中文文案排版指北规范

### 代码文档
- 所有公共API必须有文档注释，包括参数、返回值和异常
- 复杂算法或业务逻辑需添加实现说明
- 代码示例应当简明且可直接运行
- 使用合适的代码块格式，指定语言类型
- 配置文件变更需提供示例和说明

### 格式规范
- 使用Markdown格式编写所有文档
- 图表应清晰可见，提供图表说明
- 链接应有描述性文本，避免使用"点击这里"等无信息量的链接文本
- 文件名应使用小写字母和连字符，如`user-guide.md`
- 遵循一致的日期格式：YYYY-MM-DD

### 文档维护
- 定期审查文档确保内容最新
- 记录文档的最后更新日期
- 弃用的功能在文档中明确标注
- 主要版本变更应更新相关文档
- 错误修正应同时更新相关文档

### 架构文档使用规范
- 严格遵循`@file_usage_guide.md`中定义的文档使用范围和阅读路径
- 复杂功能开发前必须先参考相关架构文档
- 架构文档的更新需同步更新所有依赖文档
- 遵循文档使用最佳实践，根据角色选择适当文档
- 文档的列表、表格和图表必须保持清晰的结构化形式

## 示例

<example>
  # 用户认证API

  本文档描述了VibeCopilot用户认证API的使用方法和参数要求。

  ## 目录
  - [认证流程](#认证流程)
  - [API端点](#api端点)
  - [错误处理](#错误处理)

  ## 认证流程

  用户认证遵循OAuth 2.0标准流程，包括以下步骤：
  1. 客户端请求授权
  2. 用户登录并授权
  3. 服务器返回授权码
  4. 客户端使用授权码获取访问令牌

  ## API端点

  ### 获取授权码

  ```http
  GET /oauth/authorize
  ```

  **请求参数：**

  | 参数 | 类型 | 必填 | 描述 |
  |------|------|------|------|
  | client_id | string | 是 | 客户端ID |
  | redirect_uri | string | 是 | 回调URI |
  | scope | string | 否 | 权限范围 |

  **响应示例：**

  ```json
  {
    "code": "authorization_code_here",
    "state": "original_state_if_provided"
  }
  ```

  最后更新: 2023-06-15
</example>

<example type="invalid">
  用户认证API

  这个API用来做用户认证的。

  用法：
  调用/oauth/authorize，传入client_id和redirect_uri参数

  然后会返回code

  如果出错了就会有错误信息

  还可以调用/oauth/token获取token

  点击[这里](link)查看更多

  更新于6/15/23
</example>
