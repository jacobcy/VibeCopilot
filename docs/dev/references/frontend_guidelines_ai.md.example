# VibeCopilot前端开发规范 - AI指南

## 技术栈

使用以下技术栈：
- TypeScript
- React
- Tailwind CSS
- Vite
- shadcn/ui（UI组件库）
- Zustand（状态管理）
- React Query（服务器状态）

## 目录结构

严格遵循以下目录结构：
```
src/
├── ui/
│   ├── components/        # 共享UI组件
│   │   ├── common/        # 基础组件
│   │   ├── layout/        # 布局组件
│   │   └── [feature]/     # 功能相关组件
│   ├── hooks/             # 自定义React钩子
│   ├── utils/             # UI工具函数
│   └── types/             # UI相关类型定义
├── pages/                 # 页面组件
├── features/              # 功能模块
├── store/                 # 状态管理
└── services/              # API服务
```

## 命名规则

### 文件命名
- 组件文件: **PascalCase.tsx**
- 钩子文件: **use-kebab-case.ts**
- 工具函数: **camelCase.ts**
- 类型定义: **camelCase.types.ts**

### 代码命名
- 组件名: **PascalCase**
- 组件属性: **camelCase**
- 钩子名: **usePascalCase**
- 事件处理函数: **handle[Event]**

## 组件规范

### 组件接口
- 使用TypeScript接口定义props
- 示例:
```tsx
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  isLoading?: boolean;
}
```

### 组件结构
```tsx
// 推荐的组件结构
import { useState } from 'react';
import { cn } from '@/utils/cn';

interface ComponentProps {
  // props定义
}

export function Component({ prop1, prop2, className }: ComponentProps) {
  // 局部状态
  const [state, setState] = useState(initialState);

  // 事件处理
  const handleEvent = () => {
    // 处理逻辑
  };

  return (
    <div className={cn('base-classes', className)}>
      {/* 组件内容 */}
    </div>
  );
}
```

## 状态管理规则

### Zustand Store规范
```typescript
// store定义示例
import { create } from 'zustand';

interface ExampleState {
  data: DataType[];
  isLoading: boolean;
  error: Error | null;

  // 动作
  fetchData: () => Promise<void>;
  addItem: (item: DataType) => void;
  removeItem: (id: string) => void;
}

export const useExampleStore = create<ExampleState>((set, get) => ({
  data: [],
  isLoading: false,
  error: null,

  fetchData: async () => {
    set({ isLoading: true, error: null });
    try {
      const data = await apiService.getData();
      set({ data, isLoading: false });
    } catch (error) {
      set({ error: error as Error, isLoading: false });
    }
  },

  addItem: (item) => set((state) => ({
    data: [...state.data, item]
  })),

  removeItem: (id) => set((state) => ({
    data: state.data.filter(item => item.id !== id)
  })),
}));
```

## React Query 使用规则
- 使用`useQuery`获取数据
- 使用`useMutation`修改数据
- 查询键必须是数组形式
- 示例:
```tsx
// 正确的React Query使用方式
const { data, isLoading } = useQuery(
  ['projects', projectId],
  () => fetchProject(projectId),
  { staleTime: 5 * 60 * 1000 }
);
```

## 样式规则
- 优先使用Tailwind工具类
- 避免内联样式
- 使用`cn`工具函数合并类名
- 定制样式通过Tailwind配置扩展

## 表单处理
- 使用React Hook Form处理表单
- 使用Zod验证数据
- 示例:
```tsx
// 表单处理示例
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';

const formSchema = z.object({
  name: z.string().min(2).max(50),
  email: z.string().email(),
});

export function ExampleForm() {
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      email: '',
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    // 提交处理
  }

  return (
    <form onSubmit={form.handleSubmit(onSubmit)}>
      {/* 表单内容 */}
    </form>
  );
}
```

> **注意**: 本文档是精简版指南，完整文档请参考: `docs/dev/architecture/frontend/guidelines.md`
