# VibeCopilot 开发指南

本指南为VibeCopilot项目开发者提供详细的开发环境设置、项目结构、工作流程和最佳实践指导，确保开发过程高效、一致。

## 1. 项目概述

VibeCopilot是一个AI辅助项目开发工具，帮助开发者通过AI工具快速启动、规划和管理项目。它通过项目状态跟踪、文档自动生成、AI辅助编码和工具推荐等功能，提升开发效率和项目质量。

### 1.1 核心功能

- **项目初始化与规划**: 引导用户建立项目结构和文档
- **开发过程跟踪**: 跟踪项目进度和任务状态
- **文档自动生成**: 基于项目状态生成文档
- **AI辅助编码**: 提供代码建议和问题解决方案
- **工具推荐**: 根据项目上下文推荐合适的开发工具

### 1.2 技术栈

- **后端**: Python 3.10+
- **前端**: TypeScript, React, Tailwind CSS
- **数据存储**: SQLite, 文件系统
- **AI集成**: OpenAI API, Claude API
- **工具**: CLI, MCP接口

## 2. 开发环境设置

### 2.1 必要条件

- Python 3.10+
- Node.js 18+
- Git
- 编辑器/IDE (推荐VS Code或PyCharm)
- 可选: Docker

### 2.2 开发环境设置步骤

#### 基本环境设置

1. **克隆代码库**:
   ```bash
   git clone https://github.com/yourusername/vibecopilot.git
   cd vibecopilot
   ```

2. **设置Python环境**:
   ```bash
   # 创建虚拟环境
   python -m venv venv

   # 激活虚拟环境
   # Windows:
   venv\Scripts\activate
   # Unix/MacOS:
   source venv/bin/activate

   # 安装开发依赖
   pip install -e ".[dev]"
   ```

3. **设置前端环境**(如适用):
   ```bash
   cd frontend
   npm install
   ```

4. **配置环境变量**:
   创建`.env`文件并设置必要的环境变量:
   ```
   # API密钥
   OPENAI_API_KEY=your_openai_api_key
   ANTHROPIC_API_KEY=your_anthropic_api_key

   # 开发设置
   DEBUG=True
   ENV=development
   ```

#### IDE设置

**VS Code配置**:
1. 安装推荐扩展:
   - Python
   - Pylance
   - ESLint
   - Prettier
   - markdownlint

2. 工作区设置 (.vscode/settings.json):
   ```json
   {
     "python.linting.enabled": true,
     "python.linting.pylintEnabled": true,
     "python.linting.flake8Enabled": true,
     "python.formatting.provider": "black",
     "editor.formatOnSave": true,
     "editor.codeActionsOnSave": {
       "source.organizeImports": true
     }
   }
   ```

**PyCharm配置**:
1. 打开项目并选择正确的Python解释器(venv)
2. 启用必要插件: Mypy, Black formatter

### 2.3 验证环境

运行以下命令验证环境设置是否正确:

```bash
# 运行测试
pytest

# 启动后端服务(如适用)
python -m vibecopilot.api.app

# 启动前端开发服务器(如适用)
cd frontend && npm run dev
```

## 3. 项目结构详解

VibeCopilot采用模块化结构，按功能职责清晰划分目录。以下是关键目录和文件的详细说明:

### 3.1 根目录

```
vibecopilot/                # 项目根目录
├── pyproject.toml          # 项目元数据和依赖
├── setup.py                # 安装脚本
├── README.md               # 项目介绍
└── .env.example            # 环境变量示例
```

### 3.2 主要模块

```
vibecopilot/                # 主源码目录
├── __init__.py             # 包初始化
├── main.py                 # CLI入口点
├── config.py               # 全局配置
├── core/                   # 核心引擎
├── state/                  # 状态管理
├── document/               # 文档管理
├── ai/                     # AI集成
├── analyzer/               # 项目分析
├── tools/                  # 工具推荐
├── config/                 # 配置服务
├── storage/                # 数据存储
├── api/                    # API接口
├── cli/                    # 命令行接口
├── mcp/                    # MCP工具接口
├── templates/              # 文档模板
├── utils/                  # 工具函数
└── tests/                  # 测试
```

### 3.3 核心组件详解

**Core Engine (核心引擎)**:
中央协调器，管理模块之间的交互和服务注册表。

**State Manager (状态管理器)**:
管理项目状态、阶段和任务，计算进度和提供状态变更通知。

**Document Manager (文档管理器)**:
处理文档模板、生成和版本控制，提供渲染功能。

**AI Integration (AI集成)**:
管理AI模型连接、提示词模板和上下文构建。

**Project Analyzer (项目分析器)**:
分析项目代码结构、依赖和架构，生成报告。

**Tools Recommendation (工具推荐)**:
基于项目上下文推荐合适的开发工具。

## 4. 开发工作流

### 4.1 Git工作流

VibeCopilot采用基于功能分支的Git工作流:

1. **主分支**:
   - `main`: 稳定版本，仅通过PR合并
   - `dev`: 开发分支，集成测试通过的功能

2. **功能分支**:
   - 从`dev`分支创建
   - 命名约定: `feature/short-description`
   - 完成后提交PR到`dev`

3. **修复分支**:
   - 用于修复问题
   - 命名约定: `fix/issue-description`

4. **版本分支**:
   - 准备发布时创建
   - 命名约定: `release/x.y.z`

### 4.2 开发流程

1. **任务规划**:
   - 在项目管理工具中创建任务
   - 明确需求和验收标准

2. **开发步骤**:
   - 创建功能分支
   - 实现功能和单元测试
   - 确保测试覆盖率符合要求
   - 本地验证功能

3. **代码提交**:
   - 编写清晰的提交消息
   - 使用语义化提交格式:
     ```
     feat: 添加用户认证功能
     fix: 修复状态更新问题
     docs: 更新API文档
     test: 添加状态管理测试
     refactor: 重构文档生成模块
     ```

4. **代码审查**:
   - 创建PR并请求审查
   - 解决审查反馈
   - 确保CI测试通过

5. **合并和部署**:
   - 通过审查后合并到`dev`
   - 定期从`dev`合并到`main`
   - 发布新版本

### 4.3 版本管理

VibeCopilot使用语义化版本控制 (Semantic Versioning):

- **主版本号**: 不向后兼容的API变更
- **次版本号**: 向后兼容的功能新增
- **修订版本号**: 向后兼容的问题修复

版本发布流程:
1. 更新版本号和CHANGELOG
2. 创建版本标签
3. 构建分发包
4. 发布到PyPI

## 5. 模块开发指南

### 5.1 核心引擎开发

核心引擎是系统的中心枢纽，负责协调各模块。开发原则:

- 保持高内聚、低耦合
- 使用依赖注入模式
- 实现事件驱动架构
- 提供清晰的服务注册和发现机制

示例:
```python
# 服务注册
class ServiceRegistry:
    def __init__(self):
        self._services = {}

    def register(self, service_name, service_instance):
        self._services[service_name] = service_instance

    def get(self, service_name):
        return self._services.get(service_name)
```

### 5.2 状态管理开发

状态管理模块追踪项目状态和进度。开发原则:

- 状态变更通知机制
- 原子性更新操作
- 持久化状态数据
- 提供清晰的状态查询API

示例:
```python
# 状态更新
class StateManager:
    def __init__(self, storage_manager):
        self.storage = storage_manager
        self.observers = []

    def register_observer(self, observer):
        self.observers.append(observer)

    def update_task_status(self, task_id, status):
        # 更新任务状态
        task = self.storage.get_task(task_id)
        task.status = status
        self.storage.save_task(task)

        # 通知观察者
        for observer in self.observers:
            observer.notify_task_update(task)
```

### 5.3 文档管理开发

文档管理模块处理文档生成和版本控制。开发原则:

- 模板与内容分离
- 支持多种渲染格式
- 实现版本控制
- 提供文档生成钩子

示例:
```python
# 文档生成
class DocumentManager:
    def __init__(self, template_engine, storage_manager):
        self.template_engine = template_engine
        self.storage = storage_manager

    def generate_document(self, doc_type, project_id, data):
        template = self.template_engine.get_template(doc_type)
        content = template.render(data)

        doc = Document(
            project_id=project_id,
            type=doc_type,
            content=content,
            version=1
        )

        return self.storage.save_document(doc)
```

### 5.4 AI集成开发

AI集成模块管理与AI模型的交互。开发原则:

- 抽象不同AI提供商的差异
- 实现提示词模板系统
- 管理上下文和会话
- 处理错误和重试策略

示例:
```python
# AI服务集成
class AIManager:
    def __init__(self, config_manager):
        self.config = config_manager
        self.providers = {
            'openai': OpenAIProvider(self.config.get('openai_api_key')),
            'anthropic': AnthropicProvider(self.config.get('anthropic_api_key'))
        }

    def get_completion(self, prompt, provider='openai', model=None, **options):
        provider_instance = self.providers.get(provider)
        if not provider_instance:
            raise ValueError(f"Unknown AI provider: {provider}")

        return provider_instance.complete(prompt, model, **options)
```

## 6. 测试策略

### 6.1 测试类型

VibeCopilot实施多层次测试策略:

- **单元测试**: 测试独立组件
- **集成测试**: 测试组件交互
- **功能测试**: 测试完整功能
- **端到端测试**: 测试整个系统
- **性能测试**: 测试系统性能

### 6.2 测试工具和框架

- **测试框架**: pytest
- **测试覆盖率**: pytest-cov
- **模拟工具**: unittest.mock, pytest-mock
- **性能测试**: locust
- **代码质量**: flake8, mypy, black

### 6.3 测试最佳实践

- 为每个模块创建测试套件
- 使用fixtures和工厂方法创建测试数据
- 模拟外部依赖和服务
- 实现参数化测试
- 维持80%以上的测试覆盖率

示例:
```python
# 状态管理单元测试
import pytest
from vibecopilot.state.state_manager import StateManager

@pytest.fixture
def mock_storage():
    # 创建存储管理器模拟
    return Mock()

def test_update_task_status(mock_storage):
    # 创建测试实例
    state_manager = StateManager(mock_storage)

    # 模拟任务
    mock_task = Mock()
    mock_storage.get_task.return_value = mock_task

    # 注册观察者
    mock_observer = Mock()
    state_manager.register_observer(mock_observer)

    # 执行测试
    state_manager.update_task_status('task-123', 'completed')

    # 验证
    assert mock_task.status == 'completed'
    mock_storage.save_task.assert_called_once_with(mock_task)
    mock_observer.notify_task_update.assert_called_once_with(mock_task)
```

## 7. API和接口开发

### 7.1 API设计原则

- 使用RESTful设计风格
- 实现无状态请求处理
- 提供详细的错误信息
- 版本控制API端点
- 适当使用HTTP状态码

### 7.2 CLI接口开发

- 使用typer创建CLI命令
- 提供清晰的帮助文档
- 实现交互式提示
- 统一错误处理
- 支持配置文件

示例:
```python
# CLI命令实现
import typer
from rich.console import Console

app = typer.Typer()
console = Console()

@app.command()
def init(name: str = typer.Option(..., help="项目名称")):
    """初始化新项目"""
    try:
        # 初始化项目逻辑
        console.print(f"[green]成功初始化项目: {name}[/green]")
    except Exception as e:
        console.print(f"[red]初始化失败: {str(e)}[/red]")
        raise typer.Exit(code=1)
```

### 7.3 MCP接口开发

- 实现标准MCP协议
- 提供上下文感知响应
- 处理并发请求
- 优化响应时间
- 实现安全认证

## 8. 发布流程

### 8.1 发布准备

1. 更新版本号 (setup.py, __init__.py)
2. 更新CHANGELOG.md
3. 确保所有测试通过
4. 审查文档更新
5. 检查依赖版本

### 8.2 发布步骤

1. 合并到主分支
2. 打版本标签
3. 构建分发包
4. 发布到PyPI
5. 创建GitHub发布

### 8.3 发布后任务

1. 更新文档站点
2. 通知用户和贡献者
3. 收集初期反馈
4. 监控使用情况和问题

## 9. 故障排查和调试

### 9.1 日志系统

VibeCopilot使用结构化日志记录:

```python
# 日志配置
import logging
import structlog

def configure_logging():
    structlog.configure(
        processors=[
            structlog.stdlib.filter_by_level,
            structlog.stdlib.add_logger_name,
            structlog.stdlib.add_log_level,
            structlog.stdlib.PositionalArgumentsFormatter(),
            structlog.processors.TimeStamper(fmt="iso"),
            structlog.processors.JSONRenderer()
        ],
        logger_factory=structlog.stdlib.LoggerFactory(),
        wrapper_class=structlog.stdlib.BoundLogger,
        cache_logger_on_first_use=True,
    )

    # 设置日志级别
    logging.basicConfig(
        level=logging.INFO,
        format="%(message)s",
        handlers=[logging.StreamHandler()]
    )
```

### 9.2 调试技巧

- 使用`pdb`或IDE调试器设置断点
- 使用`rich`库增强调试输出
- 启用详细日志记录
- 利用性能分析工具

### 9.3 常见问题解决

- API密钥问题: 检查环境变量和配置
- 依赖冲突: 使用虚拟环境和固定版本
- 权限问题: 检查文件和目录权限
- 性能问题: 使用分析工具定位瓶颈

## 10. 贡献指南

### 10.1 如何贡献

1. 查看开放的Issues
2. 在Issue上表明意向
3. Fork项目并创建分支
4. 实现更改并添加测试
5. 提交PR
6. 参与代码审查

### 10.2 贡献标准

- 遵循项目编码风格
- 编写单元测试
- 更新相关文档
- 保持PR专注于单一变更
- 提供清晰的PR描述

### 10.3 行为准则

- 尊重所有贡献者
- 提供建设性反馈
- 保持专业和友好
- 聚焦问题而非个人
- 欢迎新贡献者

## 11. 总结

本开发指南提供了VibeCopilot项目的全面开发参考。通过遵循这些指南和最佳实践，开发者可以高效地参与项目，保持代码质量和一致性。

随着项目的发展，本指南将持续更新以反映最新的实践和流程。欢迎所有开发者提供反馈，帮助我们改进这份指南。
