# Obsidian + Docusaurus 混合文档系统开发方案

## 1. 需求概述

构建一个混合文档管理系统，结合 Obsidian 的灵活知识管理和 Docusaurus 的专业文档发布能力，解决以下核心痛点：
- 文档重命名和移动时保持引用完整性
- 自动更新交叉引用和目录结构
- 支持团队协作和文档版本控制
- 提供专业的文档展示和分享平台

## 2. 系统架构

```
VibeCopilot 文档系统
├── 内部编辑层 (Obsidian)
│   ├── 知识图谱与双向链接
│   ├── 自动索引与目录生成
│   └── 模板系统
│
├── 同步与转换层
│   ├── Git 版本控制
│   ├── Markdown 兼容性处理
│   └── 自动导出工具
│
└── 发布展示层 (Docusaurus)
    ├── 静态网站生成
    ├── 搜索功能
    └── API 文档展示
```

## 3. 实施步骤

### 阶段一：基础环境搭建 (3天)

1. **Obsidian 环境配置**
   - 创建项目 Vault 结构
   - 设置核心插件：
     - Dataview（动态查询）
     - Templater（模板系统）
     - Git（版本控制）
     - Auto Link Title（链接管理）
     - Linter（文档标准化）

2. **Docusaurus 初始化**
   - 安装与配置基础环境
   - 设置主题与基本布局
   - 配置导航与侧边栏结构

3. **Git 工作流设计**
   - 创建文档专用分支
   - 设置 .gitignore 过滤 Obsidian 配置文件
   - 配置提交钩子，确保文档格式一致性

### 阶段二：自动化工具开发 (5天)

1. **链接同步工具**
   - 开发脚本处理 Obsidian 与 Docusaurus 链接格式转换：

```javascript
// link-converter.js
const fs = require('fs');
const glob = require('glob');
const path = require('path');

// 匹配 Obsidian 链接 [[文件名]]
const obsidianLinkRegex = /\[\[([^\]]+?)(\|([^\]]+?))?\]\]/g;

// 转换为 Docusaurus 兼容链接
function convertLinks(content, filePath, docBase) {
  return content.replace(obsidianLinkRegex, (match, link, _, alias) => {
    // 计算相对路径
    const targetPath = resolveObsidianLink(link, filePath, docBase);
    const displayText = alias || link;
    return `[${displayText}](${targetPath})`;
  });
}

// 处理所有文档
glob('docs/**/*.md', (err, files) => {
  if (err) throw err;

  files.forEach(file => {
    const content = fs.readFileSync(file, 'utf8');
    const converted = convertLinks(content, file, 'docs');
    fs.writeFileSync(file, converted);
  });
});
```

2. **目录生成器**
   - 实现自动生成文档目录索引：

```javascript
// index-generator.js
const fs = require('fs');
const path = require('path');
const matter = require('gray-matter');
const glob = require('glob');

// 扫描目录生成索引
function generateIndex(directory) {
  const files = glob.sync(`${directory}/*.md`);

  // 排除索引文件本身
  const contentFiles = files.filter(f => !path.basename(f).startsWith('_index'));

  // 提取元数据
  const pages = contentFiles.map(file => {
    const content = fs.readFileSync(file, 'utf8');
    const { data, excerpt } = matter(content, { excerpt: true });

    return {
      path: file,
      title: data.title || path.basename(file, '.md'),
      description: data.description || excerpt || '',
      category: data.category || 'uncategorized'
    };
  });

  // 生成索引文件内容
  let indexContent = '# 目录\n\n';

  // 按类别分组
  const categories = {};
  pages.forEach(page => {
    categories[page.category] = categories[page.category] || [];
    categories[page.category].push(page);
  });

  // 生成类别索引
  Object.entries(categories).forEach(([category, pages]) => {
    indexContent += `## ${category}\n\n`;

    pages.forEach(page => {
      const relativePath = path.relative(directory, page.path);
      indexContent += `- [${page.title}](./${relativePath}): ${page.description}\n`;
    });

    indexContent += '\n';
  });

  // 写入索引文件
  fs.writeFileSync(path.join(directory, '_index.md'), indexContent);
}

// 对每个子目录生成索引
glob('docs/*/', (err, dirs) => {
  if (err) throw err;

  dirs.forEach(dir => {
    generateIndex(dir.slice(0, -1)); // 移除末尾斜杠
  });
});
```

3. **Obsidian 配置同步工具**
   - 开发自动化配置导出工具：

```javascript
// sync-obsidian-config.js
const fs = require('fs');
const path = require('path');

// 项目特定的 Obsidian 配置
const obsidianConfig = {
  "baseFolderPath": "",
  "readableLineLength": true,
  "strictLineBreaks": false,
  "showFrontmatter": true,
  "defaultViewMode": "source",
  "livePreview": true,
  "communityPluginSortOrder": "download",
  "pdfExportSettings": {
    "pageSize": "Letter",
    "landscape": false,
    "margin": "0",
    "downscalePercent": 100
  }
};

// 创建配置目录
const configDir = path.join('docs', '.obsidian');
if (!fs.existsSync(configDir)) {
  fs.mkdirSync(configDir, { recursive: true });
}

// 写入配置文件
fs.writeFileSync(
  path.join(configDir, 'app.json'),
  JSON.stringify(obsidianConfig, null, 2)
);

// 创建插件配置
const pluginsDir = path.join(configDir, 'plugins');
if (!fs.existsSync(pluginsDir)) {
  fs.mkdirSync(pluginsDir, { recursive: true });
}

// 配置常用插件
const plugins = ['dataview', 'templater', 'obsidian-git', 'linter'];
plugins.forEach(plugin => {
  const pluginDir = path.join(pluginsDir, plugin);
  if (!fs.existsSync(pluginDir)) {
    fs.mkdirSync(pluginDir, { recursive: true });
    // 这里可以添加插件的默认配置
    fs.writeFileSync(
      path.join(pluginDir, 'data.json'),
      JSON.stringify({enabled: true}, null, 2)
    );
  }
});

console.log('Obsidian 配置已同步');
```

### 阶段三：集成与自动化 (4天)

1. **GitHub Actions 工作流配置**
   - 创建文档自动构建与部署流程：

```yaml
# .github/workflows/docs.yml
name: Build and Deploy Docs

on:
  push:
    paths:
      - 'docs/**'
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Convert Obsidian Links
        run: |
          npm install glob
          node tools/link-converter.js

      - name: Generate Indexes
        run: |
          npm install gray-matter
          node tools/index-generator.js

      - name: Install Docusaurus
        run: |
          cd website
          npm install

      - name: Build Docs
        run: |
          cd website
          npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./website/build
```

2. **文档模板系统**
   - 创建标准化文档模板：

```markdown
---
title: {{title}}
description: {{description}}
category: {{category}}
created: {{date}}
updated: {{date}}
---

# {{title}}

## 概述

{{description}}

## 内容

## 相关文档

## 参考资料
```

3. **预提交钩子设置**
   - 配置提交前文档检查：

```bash
#!/bin/sh
# .git/hooks/pre-commit

# 运行文档链接检查
node tools/check-links.js

# 运行目录同步
node tools/index-generator.js

# 如果有错误，阻止提交
if [ $? -ne 0 ]; then
  echo "文档检查失败，请修复问题后再提交"
  exit 1
fi

# 添加自动生成的索引文件
git add docs/**/_index.md
```

### 阶段四：测试与优化 (3天)

1. **文档转换测试**
   - 测试不同类型文档的迁移与转换
   - 验证链接完整性
   - 检查索引生成准确性

2. **性能优化**
   - 优化大型文档库的处理速度
   - 增加缓存机制，只处理更改的文件

3. **用户引导文档**
   - 创建团队使用指南
   - 开发工作流程文档

## 4. 时间规划

- **总体开发周期**：15天
  - 基础环境搭建：3天
  - 自动化工具开发：5天
  - 集成与自动化：4天
  - 测试与优化：3天

## 5. 成功标准

1. **功能验收标准**
   - Obsidian双向链接可正确转换为Docusaurus链接
   - 文件移动或重命名后，引用自动更新
   - 目录结构变化自动反映在索引中
   - 团队成员能通过Git正常协作

2. **性能标准**
   - 文档转换处理时间不超过30秒
   - Docusaurus构建时间不超过2分钟
   - 导航和索引加载时间不超过1秒

## 6. 下一步行动

1. 创建项目基础目录结构
2. 配置Obsidian工作环境
3. 初始化Docusaurus
4. 开发核心转换工具
